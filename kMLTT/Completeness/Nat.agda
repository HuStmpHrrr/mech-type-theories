{-# OPTIONS --without-K --safe #-}

module kMLTT.Completeness.Nat where


-- N-[]       : ∀ i →
--              Γ ⊨s σ ∶ Δ →
--              -----------------------
--              Γ ⊨ N [ σ ] ≈ N ∶ Se i
-- ze-[]      : Γ ⊨s σ ∶ Δ →
--              ----------------------
--              Γ ⊨ ze [ σ ] ≈ ze ∶ N
-- su-[]      : Γ ⊨s σ ∶ Δ →
--              Δ ⊨ t ∶ N →
--              ----------------------------------
--              Γ ⊨ su t [ σ ] ≈ su (t [ σ ]) ∶ N
-- rec-[]     : ∀ {i} →
--              Γ ⊨s σ ∶ Δ →
--              N ∺ Δ ⊨ T ∶ Se i →
--              Δ ⊨ s ∶ T [| ze ] →
--              T ∺ N ∺ Δ ⊨ r ∶ T [ (wk ∘ wk) , su (v 1) ] →
--              Δ ⊨ t ∶ N →
--              -----------------------------------------------------------------------------------------------
--              Γ ⊨ rec T s r t [ σ ] ≈ rec (T [ q σ ]) (s [ σ ]) (r [ q (q σ) ]) (t [ σ ]) ∶ T [ σ , t [ σ ] ]
-- ze-≈       : ⊨ Γ →
--              ----------------
--              Γ ⊨ ze ≈ ze ∶ N
-- su-cong    : Γ ⊨ t ≈ t′ ∶ N →
--              --------- ------------
--              Γ ⊨ su t ≈ su t′ ∶ N
-- rec-cong   : ∀ {i} →
--              N ∺ Γ ⊨ T ≈ T′ ∶ Se i →
--              Γ ⊨ s ≈ s′ ∶ T [ I , ze ] →
--              T ∺ N ∺ Γ ⊨ r ≈ r′ ∶ T [ (wk ∘ wk) , su (v 1) ] →
--              Γ ⊨ t ≈ t′ ∶ N →
--              --------------------------------------------
--              Γ ⊨ rec T s r t ≈ rec T′ s′ r′ t′ ∶ T [| t ]
-- rec-β-ze   : ∀ {i} →
--              N ∺ Γ ⊨ T ∶ Se i →
--              Γ ⊨ s ∶ T [| ze ] →
--              T ∺ N ∺ Γ ⊨ r ∶ T [ (wk ∘ wk) , su (v 1) ] →
--              ---------------------------------------------
--              Γ ⊨ rec T s r ze ≈ s ∶ T [| ze ]
-- rec-β-su   : ∀ {i} →
--              N ∺ Γ ⊨ T ∶ Se i →
--              Γ ⊨ s ∶ T [| ze ] →
--              T ∺ N ∺ Γ ⊨ r ∶ T [ (wk ∘ wk) , su (v 1) ] →
--              Γ ⊨ t ∶ N →
--              -----------------------------------------------------------------
--              Γ ⊨ rec T s r (su t) ≈ r [ (I , t) , rec T s r t ] ∶ T [| su t ]
