{-# OPTIONS --without-K --safe #-}

open import Level hiding (_‚äî_)
open import Axiom.Extensionality.Propositional

-- Properties of the gluing models for terms and types
module NonCumulative.Soundness.Properties.LogRel (fext : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí Extensionality ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where

open import Lib
open import Data.Nat
open import Data.Nat.Properties as ‚Ñï‚Çö

open import NonCumulative.Statics.Ascribed.Misc
open import NonCumulative.Statics.Ascribed.Presup
open import NonCumulative.Statics.Ascribed.Properties
open import NonCumulative.Statics.Ascribed.Properties.Subst
open import NonCumulative.Statics.Ascribed.Refl
open import NonCumulative.Semantics.Readback
open import NonCumulative.Semantics.Properties.PER (fext)
open import NonCumulative.Soundness.LogRel

open import NonCumulative.Soundness.Properties.NoFunExt.LogRel public

Glu-wellfounded-‚â°‚Ä≤ : ‚àÄ {j i i‚Ä≤} ‚Üí (j<i : j < i) ‚Üí (j<i‚Ä≤ : j < i‚Ä≤) ‚Üí
  (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i j<i univ {A} {B}) ‚â° (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i‚Ä≤ j<i‚Ä≤ univ {A} {B})
Glu-wellfounded-‚â°‚Ä≤ {j} {i} {i‚Ä≤} (s‚â§s {j} j<i) (s‚â§s {j} j<i‚Ä≤) = fext Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) ‚Üí cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí
    Glu.‚ü¶ j , rc , univ ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) (‚â§-trans j‚Ä≤<j j<i‚Ä≤))

Glu-wellfounded-‚â° : ‚àÄ {i j} (j<i : j < i) ‚Üí  (Œª {A B} ‚Üí Glu-wellfounded i {j} j<i (ùïå-wellfounded j) {A} {B}) ‚â° (_‚ä¢_¬Æ[ j ]_)
Glu-wellfounded-‚â° {j = j} (s‚â§s j<i) = cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí Glu.‚ü¶ j , rc , ùïå-wellfounded j ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) j‚Ä≤<j)

 -- If t and a are related, then a is in the El PER model.
¬ÆEl‚áí‚ààEl : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
          Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
          -----------------------------
          a ‚àà‚Ä≤ El i A‚âàB
¬ÆEl‚áí‚ààEl (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°‚Ä≤i , snd) = ne c‚âàc j‚â°i j‚â°‚Ä≤i
¬ÆEl‚áí‚ààEl N‚Ä≤ (t¬ÆNat , T‚âàN) = ¬ÆNat‚áí‚ààNat t¬ÆNat
¬ÆEl‚áí‚ààEl {a = a} {i = i} (U {j} {j‚Ä≤ = _} i‚â°1+j j‚â°j‚Ä≤) record { t‚à∂T = t‚à∂T ; T‚âà = T‚âà ; A‚ààùïå = A‚ààùïå ; rel = rel }
  rewrite ùïå-wellfounded-‚â°-ùïå (1 + j) (‚â§-reflexive refl) | ùïå-wf-simpl i | sym (ùïå-wf-simpl j) = A‚ààùïå
¬ÆEl‚áí‚ààEl (Œ† eq jA RT j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open GluŒõ t¬Æ
¬ÆEl‚áí‚ààEl (L eq A‚âàA‚Ä≤ j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open Glul t¬Æ

Glu-wellfounded-‚â°-Glul : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (j + k) {l} (Li‚â§ refl l<k)) ‚â° Glu-wellfounded k
Glu-wellfounded-‚â°-Glul {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Li‚â§ {j + k} refl l<k) l<k))

Glu-wellfounded-‚â°-GluŒõ : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (max j k) {l} (Œ†O‚â§ refl l<k)) ‚â° Glu-wellfounded k
Glu-wellfounded-‚â°-GluŒõ {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Œ†O‚â§ {max j k} refl l<k) l<k))

Glu-wellfounded-‚â°-GluU : ‚àÄ {j} ‚Üí
  (Œª {l} l<j ‚Üí Glu-wellfounded (j) {l} (‚â§-trans l<j (‚â§-reflexive refl))) ‚â° Glu-wellfounded j
Glu-wellfounded-‚â°-GluU {j} = implicit-extensionality fext (fext Œª l<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans l<j (‚â§-reflexive refl)) l<j)

Glu-wellfounded-‚â°-GluŒõ2 : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (max j k) {l} (Œ†I‚â§ refl l<k)) ‚â° Glu-wellfounded j
Glu-wellfounded-‚â°-GluŒõ2 {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Œ†I‚â§ {max j k} refl l<k) l<k))


¬ÆEl‚áí¬Æ : ‚àÄ { i } ‚Üí (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
        Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
        ----------------------------
        Œì ‚ä¢ T ¬Æ[ i ] A‚âàB
¬ÆEl‚áí¬Æ (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°√≠ , record { t‚à∂T = t‚à∂T ; ‚ä¢T = ‚ä¢T ; krip = krip }) = ‚ä¢T , Œª ‚ä¢œÉ ‚Üí proj‚ÇÅ (krip ‚ä¢œÉ)
¬ÆEl‚áí¬Æ N‚Ä≤ (_ , T‚âàN) = T‚âàN
¬ÆEl‚áí¬Æ (U _ _) t¬Æ = GluU.T‚âà t¬Æ
¬ÆEl‚áí¬Æ (Œ† {j = j} {k = k} refl jA RT refl refl) record { t‚à∂T = t‚à∂T ; a‚ààEl = a‚ààEl ; IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip }
  rewrite ùïå-wf-gen {max j k} k (Œª l<k ‚Üí Œ†O‚â§ refl l<k) | Glu-wellfounded-‚â°-GluŒõ {j} {k} = record
  { IT = IT
  ; OT = OT
  ; ‚ä¢IT = ‚ä¢IT
  ; ‚ä¢OT = ‚ä¢OT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record
      { IT-rel = IT-rel
      ; OT-rel = Œª s¬Æ a‚àà ‚Üí let open ŒõKripke (ap-rel s¬Æ a‚àà) in ¬ÆEl‚áí¬Æ (Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ¬Æfa
      }
  }
¬ÆEl‚áí¬Æ (L‚Ä≤ {j} {k} kA) record { t‚à∂T = t‚à∂T ; UT = UT ; ‚ä¢UT = ‚ä¢UT ; a‚ààEl = a‚ààEl ; T‚âà = T‚âà ; krip = krip }
  rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) | Glu-wellfounded-‚â°-Glul {j} {k} = record
  { UT = UT
  ; ‚ä¢UT = ‚ä¢UT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open lKripke (krip ‚ä¢œÉ) in ¬ÆEl‚áí¬Æ kA ¬Æua
  }

-- If t and a are related, then the type of t is well-formed.
¬ÆEl‚áíty : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
           Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
           ---------------------------
           Œì ‚ä¢ T ‚à∂[ 1 + i ] Se i
¬ÆEl‚áíty A‚âàB t‚àºa = ¬Æ‚áíty A‚âàB (¬ÆEl‚áí¬Æ A‚âàB t‚àºa)


helper3 : ‚àÄ { j k b IT œÉ s} ‚Üí 
          (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j))) ‚Üí 
          Glu.‚ü¶ j , (Œª l<j ‚Üí Glu-wellfounded (max j k) (Œ†I‚â§ refl l<j)) , (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j)) ‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ b ‚ààEl jA ‚Üí
          Œî ‚ä¢ s ‚à∂[ j ] sub IT œÉ
helper3 {j = j} {k = k} jA tr rewrite ùïå-wf-gen {max j k} j (Œª l<k ‚Üí Œ†I‚â§ refl l<k) | Glu-wellfounded-‚â°-GluŒõ2 {j} {k} = ¬ÆEl‚áítm jA tr

-- ¬ÆEl respects term equivalence.
¬ÆEl-resp-‚âà : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
             Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
             Œì ‚ä¢ t ‚âà t‚Ä≤ ‚à∂[ i ] T ‚Üí
             ----------------------------
             Œì ‚ä¢ t‚Ä≤ ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB
¬ÆEl-resp-‚âà (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc‚Ä≤ refl _ , glu) t‚âàt‚Ä≤ = ne c‚âàc‚Ä≤ refl refl , record 
  { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
  ; ‚ä¢T = ‚ä¢T
  ; krip = Œª ‚ä¢œÉ ‚Üí proj‚ÇÅ (krip ‚ä¢œÉ) , ‚âà-trans ([]-cong (‚âà-sym t‚âàt‚Ä≤) (s-‚âà-refl (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))) (proj‚ÇÇ (krip ‚ä¢œÉ)) 
  }
  where open GluNe glu
¬ÆEl-resp-‚âà N‚Ä≤ (t¬Æ , T‚âàN) t‚âàt‚Ä≤ = ¬ÆNat-resp-‚âà t¬Æ (‚âà-conv t‚âàt‚Ä≤ T‚âàN) , T‚âàN
¬ÆEl-resp-‚âà (U {j} refl refl) record { t‚à∂T = t‚à∂T ; T‚âà = T‚âà ; A‚ààùïå = A‚ààùïå ; rel = rel } t‚âàt‚Ä≤ 
  rewrite Glu-wellfounded-‚â°-GluU {j} rewrite ùïå-wf-gen j (Œª l<j ‚Üí <-trans l<j (s‚â§s (‚â§-reflexive refl))) = record
    { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤))) 
    ; T‚âà = T‚âà 
    ; A‚ààùïå = A‚ààùïå 
    ; rel = ¬Æ-resp-‚âà A‚ààùïå rel (‚âà-conv t‚âàt‚Ä≤ T‚âà) 
    }
¬ÆEl-resp-‚âà (Œ† {j = j} {k = k} refl iA RT refl refl) record { t‚à∂T = t‚à∂T ; a‚ààEl = a‚ààEl ; IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip } t‚âàt‚Ä≤    
  rewrite Glu-wellfounded-‚â°-GluŒõ {j} {k} = record 
  { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
  ; a‚ààEl = a‚ààEl
  ; IT = IT
  ; OT = OT
  ; ‚ä¢IT = ‚ä¢IT
  ; ‚ä¢OT = ‚ä¢OT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record 
      { IT-rel = IT-rel 
      ; ap-rel = Œª t¬Æ b‚àà ‚Üí 
        let open ŒõKripke (ap-rel t¬Æ b‚àà) 
            ‚ä¢œÉ‚Ä≤     = ‚ä¢w‚áí‚ä¢s ‚ä¢œÉ
            ‚ä¢Œî      = (proj‚ÇÅ (presup-s ‚ä¢œÉ‚Ä≤))
            Œî‚ä¢IT[œÉ] = t[œÉ]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤
            IT,Œî‚ä¢s  = ‚ä¢q ‚ä¢Œî ‚ä¢œÉ‚Ä≤ ‚ä¢IT
            Œî‚ä¢OT[œÉ] = t[œÉ]-Se ‚ä¢OT IT,Œî‚ä¢s
            ‚ä¢s      = helper3 iA t¬Æ
        in record 
          { fa = fa
          ; ‚Üòfa = ‚Üòfa
          ; ¬Æfa = helper fa iA b‚àà RT (‚âà-conv ($-cong Œî‚ä¢IT[œÉ] 
                                                     Œî‚ä¢OT[œÉ] 
                                                     (‚âà-conv ([]-cong t‚âàt‚Ä≤ (s-‚âà-refl ‚ä¢œÉ‚Ä≤)) 
                                                             (‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉ‚Ä≤) (Œ†-[] ‚ä¢œÉ‚Ä≤ ‚ä¢IT ‚ä¢OT refl))
                                                     ) 
                                                     (‚âà-refl ‚ä¢s) 
                                                     refl) 
                                             (‚âà-trans ([‚àò]-Se ‚ä¢OT 
                                                              IT,Œî‚ä¢s 
                                                              (‚ä¢I,t ‚ä¢Œî Œî‚ä¢IT[œÉ] ‚ä¢s)) 
                                                      ([]-cong-Se‚Ä≥ ‚ä¢OT 
                                                                   (s-‚àò (s-, (s-I ‚ä¢Œî) Œî‚ä¢IT[œÉ] (conv ‚ä¢s (‚âà-sym ([I] Œî‚ä¢IT[œÉ])))) IT,Œî‚ä¢s) 
                                                                   (qœÉ‚àò[I,t]‚âàœÉ,t ‚ä¢Œî ‚ä¢IT ‚ä¢œÉ‚Ä≤ ‚ä¢s)
                                                      )
                                              )
                                      )
                            ¬Æfa
          }
      }
  }
  where helper : (fa : D) ‚Üí 
                 (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j))) ‚Üí 
                 (b‚àà : b ‚àà‚Ä≤ PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j)) jA) ‚Üí 
                 (RT : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j)) jA ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (max j k) (Œ†O‚â§ refl l<k))) ) ‚Üí 
                 Œî ‚ä¢ sub t œÉ $ s ‚âà sub t‚Ä≤ œÉ $ s ‚à∂[ k ] sub OT (œÉ , s ‚à∂ IT ‚Üô j) ‚Üí 
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª l<k ‚Üí ùïå-wellfounded (max j k) (Œ†O‚â§ refl l<k))‚üß Œî ‚ä¢ sub t œÉ $ s ‚à∂ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ fa ‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT b‚àà) ‚Üí 
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª l<k ‚Üí ùïå-wellfounded (max j k) (Œ†O‚â§ refl l<k))‚üß Œî ‚ä¢ sub t‚Ä≤ œÉ $ s ‚à∂ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ fa ‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT b‚àà)
        helper fa jA b‚àà RT t‚âàt‚Ä≤ ¬Æfa rewrite ùïå-wf-gen {max j k} k (Œª l<k ‚Üí Œ†O‚â§ refl l<k) = ¬ÆEl-resp-‚âà (Œ†RT.T‚âàT‚Ä≤ (RT b‚àà)) ¬Æfa t‚âàt‚Ä≤
¬ÆEl-resp-‚âà {i = i} (L {j = j} {k = k} refl kA refl refl) record { t‚à∂T = t‚à∂T ; UT = UT ; ‚ä¢UT = ‚ä¢UT ; a‚ààEl = a‚ààEl ; T‚âà = T‚âà ; krip = krip } t‚âàt‚Ä≤ 
  rewrite Glu-wellfounded-‚â°-Glul {j} {k} = record 
  { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
  ; UT = UT 
  ; ‚ä¢UT = ‚ä¢UT 
  ; a‚ààEl = a‚ààEl
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí 
      let open lKripke (krip ‚ä¢œÉ) in record 
      { ua = ua 
      ; ‚Üòua = ‚Üòua 
      ; ¬Æua = helper ua ([]-cong (unlift-cong j ‚ä¢UT (‚âà-conv t‚âàt‚Ä≤ T‚âà)) (s-‚âà-refl (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))) ¬Æua
      } 
  }
  where helper : (ua : D) ‚Üí 
                 Œî ‚ä¢ sub (unlift t) œÉ ‚âà sub (unlift t‚Ä≤) œÉ ‚à∂[ k ] sub UT œÉ ‚Üí 
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t) œÉ ‚à∂ sub UT œÉ ¬Æ ua ‚ààEl kA ‚Üí  
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t‚Ä≤) œÉ ‚à∂ sub UT œÉ ¬Æ ua ‚ààEl kA 
        helper ua  t‚âàt‚Ä≤ ¬Æua  rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = ¬ÆEl-resp-‚âà kA ¬Æua t‚âàt‚Ä≤
        