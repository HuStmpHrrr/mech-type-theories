{-# OPTIONS --without-K --safe #-}

open import Level hiding (_‚äî_)
open import Axiom.Extensionality.Propositional

-- Properties of the gluing models for terms and types
module NonCumulative.Soundness.Properties.LogRel (fext : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí Extensionality ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where

open import Lib
open import Data.Nat
open import Data.Nat.Properties as ‚Ñï‚Çö

open import NonCumulative.Statics.Ascribed.Misc
open import NonCumulative.Statics.Ascribed.Presup
open import NonCumulative.Statics.Ascribed.Properties
open import NonCumulative.Statics.Ascribed.Properties.Contexts
open import NonCumulative.Statics.Ascribed.Properties.Subst
open import NonCumulative.Statics.Ascribed.CtxEquiv
open import NonCumulative.Statics.Ascribed.Refl
open import NonCumulative.Semantics.Readback
open import NonCumulative.Semantics.Properties.PER (fext)
open import NonCumulative.Soundness.Weakening 
open import NonCumulative.Soundness.LogRel

open import NonCumulative.Soundness.Properties.NoFunExt.LogRel public

Glu-wellfounded-‚â°‚Ä≤ : ‚àÄ {j i i‚Ä≤} ‚Üí (j<i : j < i) ‚Üí (j<i‚Ä≤ : j < i‚Ä≤) ‚Üí
  (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i j<i univ {A} {B}) ‚â° (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i‚Ä≤ j<i‚Ä≤ univ {A} {B})
Glu-wellfounded-‚â°‚Ä≤ {j} {i} {i‚Ä≤} (s‚â§s {j} j<i) (s‚â§s {j} j<i‚Ä≤) = fext Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) ‚Üí cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí
    Glu.‚ü¶ j , rc , univ ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) (‚â§-trans j‚Ä≤<j j<i‚Ä≤))

Glu-wellfounded-‚â° : ‚àÄ {i j} (j<i : j < i) ‚Üí  (Œª {A B} ‚Üí Glu-wellfounded i {j} j<i (ùïå-wellfounded j) {A} {B}) ‚â° (_‚ä¢_¬Æ[ j ]_)
Glu-wellfounded-‚â° {j = j} (s‚â§s j<i) = cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí Glu.‚ü¶ j , rc , ùïå-wellfounded j ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) j‚Ä≤<j)

 -- If t and a are related, then a is in the El PER model.
¬ÆEl‚áí‚ààEl : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
          Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
          -----------------------------
          a ‚àà‚Ä≤ El i A‚âàB
¬ÆEl‚áí‚ààEl (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°‚Ä≤i , snd) = ne c‚âàc j‚â°i j‚â°‚Ä≤i
¬ÆEl‚áí‚ààEl N‚Ä≤ (t¬ÆNat , T‚âàN) = ¬ÆNat‚áí‚ààNat t¬ÆNat
¬ÆEl‚áí‚ààEl {a = a} {i = i} (U {j} {j‚Ä≤ = _} i‚â°1+j j‚â°j‚Ä≤) record { t‚à∂T = t‚à∂T ; T‚âà = T‚âà ; A‚ààùïå = A‚ààùïå ; rel = rel }
  rewrite ùïå-wellfounded-‚â°-ùïå (1 + j) (‚â§-reflexive refl) | ùïå-wf-simpl i | sym (ùïå-wf-simpl j) = A‚ààùïå
¬ÆEl‚áí‚ààEl (Œ† eq jA RT j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open GluŒõ t¬Æ
¬ÆEl‚áí‚ààEl (L eq A‚âàA‚Ä≤ j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open Glul t¬Æ

Glu-wellfounded-‚â°-Glul : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (j + k) {l} (Li‚â§ refl l<k)) ‚â° Glu-wellfounded k
Glu-wellfounded-‚â°-Glul {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Li‚â§ {j + k} refl l<k) l<k))

Glu-wellfounded-‚â°-GluŒõI : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (max j k) {l} (Œ†I‚â§ refl l<k)) ‚â° Glu-wellfounded j
Glu-wellfounded-‚â°-GluŒõI {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Œ†I‚â§ {max j k} refl l<k) l<k))

Glu-wellfounded-‚â°-GluŒõO : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (max j k) {l} (Œ†O‚â§ refl l<k)) ‚â° Glu-wellfounded k
Glu-wellfounded-‚â°-GluŒõO {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Œ†O‚â§ {max j k} refl l<k) l<k))

Glu-wellfounded-‚â°-GluU : ‚àÄ {j} ‚Üí
  (Œª {l} l<j ‚Üí Glu-wellfounded (j) {l} (‚â§-trans l<j (‚â§-reflexive refl))) ‚â° Glu-wellfounded j
Glu-wellfounded-‚â°-GluU {j} = implicit-extensionality fext (fext Œª l<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans l<j (‚â§-reflexive refl)) l<j)

¬ÆEl‚áí¬Æ : ‚àÄ { i } ‚Üí (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
        Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
        ----------------------------
        Œì ‚ä¢ T ¬Æ[ i ] A‚âàB
¬ÆEl‚áí¬Æ (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°√≠ , record { t‚à∂T = t‚à∂T ; ‚ä¢T = ‚ä¢T ; krip = krip }) = ‚ä¢T , Œª ‚ä¢œÉ ‚Üí proj‚ÇÅ (krip ‚ä¢œÉ)
¬ÆEl‚áí¬Æ N‚Ä≤ (_ , T‚âàN) = T‚âàN
¬ÆEl‚áí¬Æ (U _ _) t¬Æ = GluU.T‚âà t¬Æ
¬ÆEl‚áí¬Æ (Œ† {j = j} {k = k} refl jA RT refl refl) record { t‚à∂T = t‚à∂T ; a‚ààEl = a‚ààEl ; IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip }
  rewrite ùïå-wf-gen {max j k} k (Œª l<k ‚Üí Œ†O‚â§ refl l<k) | Glu-wellfounded-‚â°-GluŒõO {j} {k} = record
  { IT = IT
  ; OT = OT
  ; ‚ä¢IT = ‚ä¢IT
  ; ‚ä¢OT = ‚ä¢OT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record
      { IT-rel = IT-rel
      ; OT-rel = Œª s¬Æ a‚àà ‚Üí let open ŒõKripke (ap-rel s¬Æ a‚àà) in ¬ÆEl‚áí¬Æ (Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ¬Æfa
      }
  }
¬ÆEl‚áí¬Æ (L‚Ä≤ {j} {k} kA) record { t‚à∂T = t‚à∂T ; UT = UT ; ‚ä¢UT = ‚ä¢UT ; a‚ààEl = a‚ààEl ; T‚âà = T‚âà ; krip = krip }
  rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) | Glu-wellfounded-‚â°-Glul {j} {k} = record
  { UT = UT
  ; ‚ä¢UT = ‚ä¢UT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open lKripke (krip ‚ä¢œÉ) in ¬ÆEl‚áí¬Æ kA ¬Æua
  }

-- If t and a are related, then the type of t is well-formed.
¬ÆEl‚áíty : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
           Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
           ---------------------------
           Œì ‚ä¢ T ‚à∂[ 1 + i ] Se i
¬ÆEl‚áíty A‚âàB t‚àºa = ¬Æ‚áíty A‚âàB (¬ÆEl‚áí¬Æ A‚âàB t‚àºa)

private
  s:IT¬Æ‚áí‚ä¢s : ‚àÄ { j k b IT œÉ s} ‚Üí 
            (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j))) ‚Üí 
            Glu.‚ü¶ j , (Œª l<j ‚Üí Glu-wellfounded (max j k) (Œ†I‚â§ refl l<j)) , (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j)) ‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ b ‚ààEl jA ‚Üí
            Œî ‚ä¢ s ‚à∂[ j ] sub IT œÉ
  s:IT¬Æ‚áí‚ä¢s {j = j} {k = k} jA tr rewrite ùïå-wf-gen {max j k} j (Œª l<k ‚Üí Œ†I‚â§ refl l<k) | Glu-wellfounded-‚â°-GluŒõI {j} {k} = ¬ÆEl‚áítm jA tr

-- ¬ÆEl respects term equivalence.
¬ÆEl-resp-‚âà : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
             Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
             Œì ‚ä¢ t ‚âà t‚Ä≤ ‚à∂[ i ] T ‚Üí
             ----------------------------
             Œì ‚ä¢ t‚Ä≤ ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB
¬ÆEl-resp-‚âà (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc‚Ä≤ refl _ , glu) t‚âàt‚Ä≤ = ne c‚âàc‚Ä≤ refl refl , record 
  { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
  ; ‚ä¢T = ‚ä¢T
  ; krip = Œª ‚ä¢œÉ ‚Üí proj‚ÇÅ (krip ‚ä¢œÉ) , ‚âà-trans ([]-cong (‚âà-sym t‚âàt‚Ä≤) (s-‚âà-refl (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))) (proj‚ÇÇ (krip ‚ä¢œÉ)) 
  }
  where open GluNe glu
¬ÆEl-resp-‚âà N‚Ä≤ (t¬Æ , T‚âàN) t‚âàt‚Ä≤ = ¬ÆNat-resp-‚âà t¬Æ (‚âà-conv t‚âàt‚Ä≤ T‚âàN) , T‚âàN
¬ÆEl-resp-‚âà (U {j} refl refl) record { t‚à∂T = t‚à∂T ; T‚âà = T‚âà ; A‚ààùïå = A‚ààùïå ; rel = rel } t‚âàt‚Ä≤ 
  rewrite Glu-wellfounded-‚â°-GluU {j} rewrite ùïå-wf-gen j (Œª l<j ‚Üí <-trans l<j (s‚â§s (‚â§-reflexive refl))) = record
    { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤))) 
    ; T‚âà = T‚âà 
    ; A‚ààùïå = A‚ààùïå 
    ; rel = ¬Æ-resp-‚âà A‚ààùïå rel (‚âà-conv t‚âàt‚Ä≤ T‚âà) 
    }
¬ÆEl-resp-‚âà (Œ† {j = j} {k = k} refl jA RT refl refl) record { t‚à∂T = t‚à∂T ; a‚ààEl = a‚ààEl ; IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip } t‚âàt‚Ä≤    
  rewrite Glu-wellfounded-‚â°-GluŒõO {j} {k} = record 
  { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
  ; a‚ààEl = a‚ààEl
  ; IT = IT
  ; OT = OT
  ; ‚ä¢IT = ‚ä¢IT
  ; ‚ä¢OT = ‚ä¢OT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record 
      { IT-rel = IT-rel 
      ; ap-rel = Œª t¬Æ b‚àà ‚Üí 
        let open ŒõKripke (ap-rel t¬Æ b‚àà) 
            ‚ä¢œÉ‚Ä≤     = ‚ä¢w‚áí‚ä¢s ‚ä¢œÉ
            ‚ä¢Œî      = (proj‚ÇÅ (presup-s ‚ä¢œÉ‚Ä≤))
            Œî‚ä¢IT[œÉ] = t[œÉ]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤
            IT,Œî‚ä¢s  = ‚ä¢q ‚ä¢Œî ‚ä¢œÉ‚Ä≤ ‚ä¢IT
            Œî‚ä¢OT[œÉ] = t[œÉ]-Se ‚ä¢OT IT,Œî‚ä¢s
            ‚ä¢s      = s:IT¬Æ‚áí‚ä¢s jA t¬Æ
        in record 
          { fa = fa
          ; ‚Üòfa = ‚Üòfa
          ; ¬Æfa = helper fa jA b‚àà RT (‚âà-conv ($-cong Œî‚ä¢IT[œÉ] 
                                                     Œî‚ä¢OT[œÉ] 
                                                     (‚âà-conv ([]-cong t‚âàt‚Ä≤ (s-‚âà-refl ‚ä¢œÉ‚Ä≤)) 
                                                             (‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉ‚Ä≤) (Œ†-[] ‚ä¢œÉ‚Ä≤ ‚ä¢IT ‚ä¢OT refl))) 
                                                     (‚âà-refl ‚ä¢s) 
                                                     refl) 
                                             (‚âà-trans ([‚àò]-Se ‚ä¢OT 
                                                              IT,Œî‚ä¢s 
                                                              (‚ä¢I,t ‚ä¢Œî Œî‚ä¢IT[œÉ] ‚ä¢s)) 
                                                      ([]-cong-Se‚Ä≥ ‚ä¢OT 
                                                                   (s-‚àò (s-, (s-I ‚ä¢Œî) Œî‚ä¢IT[œÉ] (conv ‚ä¢s (‚âà-sym ([I] Œî‚ä¢IT[œÉ])))) IT,Œî‚ä¢s) 
                                                                   (qœÉ‚àò[I,t]‚âàœÉ,t ‚ä¢Œî ‚ä¢IT ‚ä¢œÉ‚Ä≤ ‚ä¢s))))
                            ¬Æfa
          }
      }
  }
  -- extract part of the context that we want to rewrite
  where helper : (fa : D) ‚Üí 
                 (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j))) ‚Üí 
                 (b‚àà : b ‚àà‚Ä≤ PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j)) jA) ‚Üí 
                 (RT : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k) (Œ†I‚â§ refl l<j)) jA ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (max j k) (Œ†O‚â§ refl l<k))) ) ‚Üí 
                 Œî ‚ä¢ sub t œÉ $ s ‚âà sub t‚Ä≤ œÉ $ s ‚à∂[ k ] sub OT (œÉ , s ‚à∂ IT ‚Üô j) ‚Üí 
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª l<k ‚Üí ùïå-wellfounded (max j k) (Œ†O‚â§ refl l<k))‚üß Œî ‚ä¢ sub t œÉ $ s ‚à∂ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ fa ‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT b‚àà) ‚Üí 
                 -----------------------------------
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª l<k ‚Üí ùïå-wellfounded (max j k) (Œ†O‚â§ refl l<k))‚üß Œî ‚ä¢ sub t‚Ä≤ œÉ $ s ‚à∂ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ fa ‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT b‚àà)
        helper fa jA b‚àà RT t‚âàt‚Ä≤ ¬Æfa rewrite ùïå-wf-gen {max j k} k (Œª l<k ‚Üí Œ†O‚â§ refl l<k) = ¬ÆEl-resp-‚âà (Œ†RT.T‚âàT‚Ä≤ (RT b‚àà)) ¬Æfa t‚âàt‚Ä≤
¬ÆEl-resp-‚âà {i = i} (L {j = j} {k = k} refl kA refl refl) record { t‚à∂T = t‚à∂T ; UT = UT ; ‚ä¢UT = ‚ä¢UT ; a‚ààEl = a‚ààEl ; T‚âà = T‚âà ; krip = krip } t‚âàt‚Ä≤ 
  rewrite Glu-wellfounded-‚â°-Glul {j} {k} = record 
  { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
  ; UT = UT 
  ; ‚ä¢UT = ‚ä¢UT 
  ; a‚ààEl = a‚ààEl
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí 
      let open lKripke (krip ‚ä¢œÉ) in record 
      { ua = ua 
      ; ‚Üòua = ‚Üòua 
      ; ¬Æua = helper ([]-cong (unlift-cong j ‚ä¢UT (‚âà-conv t‚âàt‚Ä≤ T‚âà)) (s-‚âà-refl (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))) ¬Æua
      } 
  }
  where helper : {a : D} ‚Üí 
                 Œî ‚ä¢ sub (unlift t) œÉ ‚âà sub (unlift t‚Ä≤) œÉ ‚à∂[ k ] sub UT œÉ ‚Üí 
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t) œÉ ‚à∂ sub UT œÉ ¬Æ a ‚ààEl kA ‚Üí  
                 -----------------------------------
                 Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t‚Ä≤) œÉ ‚à∂ sub UT œÉ ¬Æ a ‚ààEl kA 
        helper t‚âàt‚Ä≤ ¬Æa rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = ¬ÆEl-resp-‚âà kA ¬Æa t‚âàt‚Ä≤
        
-- ¬ÆEl respects context stack equivalence.
¬ÆEl-resp-‚ä¢‚âà : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
              Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
              ‚ä¢ Œì ‚âà Œî ‚Üí
              ---------------------------
              Œî ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB
¬ÆEl-resp-‚ä¢‚âà (ne‚Ä≤ x) (ne c‚âàc‚Ä≤ refl _ , glu) Œì‚âàŒî = (ne c‚âàc‚Ä≤ refl refl) , record 
  { t‚à∂T = ctxeq-tm Œì‚âàŒî t‚à∂T
  ; ‚ä¢T = ctxeq-tm Œì‚âàŒî ‚ä¢T
  ; krip = Œª ‚ä¢œÉ ‚Üí krip (‚ä¢w-resp-‚ä¢‚âà ≥ ‚ä¢œÉ (‚ä¢‚âà-sym Œì‚âàŒî)) 
  }
  where open GluNe glu
¬ÆEl-resp-‚ä¢‚âà N‚Ä≤ (t¬ÆN , T‚âàN) Œì‚âàŒî = (¬ÆNat-resp-‚ä¢‚âà t¬ÆN Œì‚âàŒî) , ctxeq-‚âà Œì‚âàŒî T‚âàN
¬ÆEl-resp-‚ä¢‚âà (U {j} refl refl) t¬Æ Œì‚âàŒî 
  rewrite Glu-wellfounded-‚â°-GluU {j} rewrite ùïå-wf-gen j (Œª l<j ‚Üí <-trans l<j (s‚â§s (‚â§-reflexive refl))) = record 
  { t‚à∂T = ctxeq-tm Œì‚âàŒî t‚à∂T
  ; T‚âà = ctxeq-‚âà Œì‚âàŒî T‚âà
  ; A‚ààùïå = A‚ààùïå
  ; rel = ¬Æ-resp-‚ä¢‚âà A‚ààùïå rel Œì‚âàŒî
  } 
  where open GluU t¬Æ
¬ÆEl-resp-‚ä¢‚âà (Œ† eq jA x x‚ÇÅ x‚ÇÇ) t¬Æ Œì‚âàŒî = 
  let Œî‚ä¢IT = ctxeq-tm Œì‚âàŒî ‚ä¢IT in record
  { t‚à∂T = ctxeq-tm Œì‚âàŒî t‚à∂T
  ; a‚ààEl = a‚ààEl
  ; IT = IT
  ; OT = OT
  ; ‚ä¢IT = Œî‚ä¢IT
  ; ‚ä¢OT = ctxeq-tm (‚à∑-cong Œì‚âàŒî ‚ä¢IT Œî‚ä¢IT (‚âà-refl ‚ä¢IT) (‚âà-refl Œî‚ä¢IT)) ‚ä¢OT
  ; T‚âà = ctxeq-‚âà Œì‚âàŒî T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí krip (‚ä¢w-resp-‚ä¢‚âà ≥ ‚ä¢œÉ (‚ä¢‚âà-sym Œì‚âàŒî))
  }
  where open GluŒõ t¬Æ
¬ÆEl-resp-‚ä¢‚âà (L refl kA refl refl) t¬Æ Œì‚âàŒî = record
  { t‚à∂T = ctxeq-tm Œì‚âàŒî t‚à∂T 
  ; UT = UT 
  ; ‚ä¢UT = ctxeq-tm Œì‚âàŒî ‚ä¢UT 
  ; a‚ààEl = a‚ààEl 
  ; T‚âà = ctxeq-‚âà Œì‚âàŒî T‚âà 
  ; krip = Œª ‚ä¢œÉ ‚Üí krip (‚ä¢w-resp-‚ä¢‚âà ≥ ‚ä¢œÉ (‚ä¢‚âà-sym Œì‚âàŒî)) 
  }
  where open Glul t¬Æ

mutual
  ¬Æ-swap : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
           (B‚âàA : B ‚âà A ‚àà ùïå i) ‚Üí
           Œì ‚ä¢ T ¬Æ[ i ] A‚âàB ‚Üí
           -----------------------
           Œì ‚ä¢ T ¬Æ[ i ] B‚âàA
  ¬Æ-swap {Œì = Œì} {T} {i = i} (ne‚Ä≤ c‚âàc‚Ä≤) (ne c‚Ä≤‚âàc _ _) (‚ä¢T , krip) = ‚ä¢T , helper
    where
      helper : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
               -----------------------------------
               Œî ‚ä¢ T [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (c‚Ä≤‚âàc  (len Œî))) ‚à∂[ 1 + i ] Se i
      helper {Œî} {œÉ} ‚ä¢œÉ
        with c‚âàc‚Ä≤ (len Œî) | c‚Ä≤‚âàc  (len Œî) | krip ‚ä¢œÉ
      ...  | _ , ‚Üòu , _ | _ , _ , ‚Üòu‚ÇÅ | TœÉ‚âà
           rewrite Re-det ‚Üòu ‚Üòu‚ÇÅ = TœÉ‚âà
  ¬Æ-swap N‚Ä≤ N‚Ä≤ T¬Æ = T¬Æ
  ¬Æ-swap (U refl refl) (U i‚â°1+j j‚â°j‚Ä≤) T¬Æ 
    rewrite ‚â°-irrelevant i‚â°1+j refl = T¬Æ
  ¬Æ-swap {_} {_} {Œì} (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) record { IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°maxjk refl | Glu-wellfounded-‚â°-GluŒõI {j} {k} | Glu-wellfounded-‚â°-GluŒõO {j} {k} | ùïå-wf-gen {max j k} k (Œª l<j ‚Üí Œ†O‚â§ refl l<j) = record 
    { IT = IT 
    ; OT = OT 
    ; ‚ä¢IT = ‚ä¢IT 
    ; ‚ä¢OT = ‚ä¢OT 
    ; T‚âà = T‚âà 
    ; krip = Œª ‚ä¢œÉ ‚Üí let open Œ†Rel (krip ‚ä¢œÉ) in record 
      { IT-rel = IT-helper jA jA‚Ä≤ IT-rel
      ; OT-rel = Œª s¬Æ a‚àà ‚Üí OT-helper refl jA jA‚Ä≤ RT RT‚Ä≤ a‚àà s¬Æ OT-rel
      }
    }
    -- generalize k‚Ä≤ so that other irrelevant premises won't be affected by rewrite
    where IT-helper : ‚àÄ {k‚Ä≤} ‚Üí 
                      (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      (jA‚Ä≤ : A‚Ä≤ ‚âà A ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA ‚Üí 
                      -----------------------------------
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA‚Ä≤
          IT-helper {k‚Ä≤ = k‚Ä≤} jA jA‚Ä≤ T¬Æ rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) = ¬Æ-swap jA jA‚Ä≤ T¬Æ
          
          OT-helper : ‚àÄ {k‚Ä≤} ‚Üí (k‚Ä≤ ‚â° k) ‚Üí  
                      (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      (jA‚Ä≤ : A‚Ä≤ ‚âà A ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      (RT : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k‚Ä≤ (ùïå-wellfounded k‚Ä≤) )) ‚Üí 
                      (RT‚Ä≤ : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤ ‚Üí Œ†RT T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a) T (œÅ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k‚Ä≤ (ùïå-wellfounded k‚Ä≤) )) ‚Üí 
                      (a‚àà‚Ä≤ : a ‚àà‚Ä≤ PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤) ‚Üí 
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ a ‚ààEl jA‚Ä≤ ‚Üí 
                      (‚àÄ {s a} ‚Üí Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) ‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ a ‚ààEl jA ‚Üí
                        (a‚àà : a ‚àà‚Ä≤ PERDef.El j (Œª g ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl g)) jA) ‚Üí 
                        Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , ùïå-wellfounded k‚Ä≤ ‚üß Œî ‚ä¢ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ‚Üí 
                      --------------------------------------------------------------
                      Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , ùïå-wellfounded k‚Ä≤ ‚üß Œî ‚ä¢ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ a‚àà‚Ä≤)
          OT-helper {k‚Ä≤ = k‚Ä≤} k‚Ä≤‚â°k jA jA‚Ä≤ RT RT‚Ä≤ a‚àà‚Ä≤ s¬Æ OT-rel rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) | k‚Ä≤‚â°k 
            with El-sym jA‚Ä≤ jA a‚àà‚Ä≤
          ... | a‚àà 
              with (RT a‚àà) | RT‚Ä≤ a‚àà‚Ä≤ | OT-rel (¬ÆEl-swap jA‚Ä≤ jA s¬Æ) a‚àà
          ... | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚Ä≤‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
              | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚üß‚ÇÅ ; T‚âàT‚Ä≤ = T‚Ä≤‚âàT } 
              | R 
              rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß ‚Üò‚ü¶T‚üß‚ÇÅ
                    | ‚ü¶‚üß-det ‚Üò‚ü¶T‚Ä≤‚üß ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ = ¬Æ-swap T‚âàT‚Ä≤ T‚Ä≤‚âàT R

  ¬Æ-swap (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ _ _) record { UT = UT ; ‚ä¢UT = ‚ä¢UT ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°j+k refl | Glu-wellfounded-‚â°-Glul {j} {k} = record 
    { UT = UT 
    ; ‚ä¢UT = ‚ä¢UT 
    ; T‚âà = T‚âà 
    ; krip = Œª ‚ä¢œÉ ‚Üí helper kA kA‚Ä≤ (krip ‚ä¢œÉ) 
    }
    where helper : (kA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                  (kA‚Ä≤ : A‚Ä≤ ‚âà A ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                  Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))‚üß Œî ‚ä¢ sub UT œÉ ¬Æ kA ‚Üí 
                  -----------------------------------
                  Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))‚üß Œî ‚ä¢ sub UT œÉ ¬Æ kA‚Ä≤
          helper kA kA‚Ä≤ T¬Æ rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = ¬Æ-swap kA kA‚Ä≤ T¬Æ
    
  ¬ÆEl-swap : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
             (B‚âàA : B ‚âà A ‚àà ùïå i) ‚Üí
             Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
             ----------------------------
             Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl B‚âàA
  ¬ÆEl-swap {_} {_} {Œì} {t} {T} {i = i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚Ä≤‚âàC _ _) (ne c‚âàc refl _ , glu) = (ne c‚âàc refl refl) , record 
    { t‚à∂T = t‚à∂T
    ; ‚ä¢T = ‚ä¢T
    ; krip = Œª ‚ä¢œÉ ‚Üí krip‚Ä≤ ‚ä¢œÉ 
    }
    where
      open GluNe glu
      krip‚Ä≤ : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
               -----------------------------------
               Œî ‚ä¢ sub T œÉ ‚âà Ne‚áíExp (proj‚ÇÅ (C‚Ä≤‚âàC (L.length Œî))) ‚à∂[ ‚Ñï.suc i ] Se i
                 √ó Œî ‚ä¢ sub t œÉ ‚âà Ne‚áíExp (proj‚ÇÅ (c‚âàc (L.length Œî))) ‚à∂[ i ] sub T œÉ
      krip‚Ä≤ {Œî} {œÉ} ‚ä¢œÉ
        with C‚âàC‚Ä≤ (len Œî) | C‚Ä≤‚âàC (len Œî) | krip ‚ä¢œÉ
      ...  | _ , ‚Üòu , _ | _ , _ , ‚Üòu‚ÇÅ | TœÉ‚âà , tœÉ‚âà 
           rewrite Re-det ‚Üòu ‚Üòu‚ÇÅ = TœÉ‚âà , tœÉ‚âà
  ¬ÆEl-swap N‚Ä≤ N‚Ä≤ T¬Æ = T¬Æ
  ¬ÆEl-swap U‚Ä≤ (U i‚â°1+j j‚â°j‚Ä≤) T¬Æ 
    rewrite ‚â°-irrelevant i‚â°1+j refl = T¬Æ
  ¬ÆEl-swap (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) record { t‚à∂T = t‚à∂T ; a‚ààEl = a‚ààEl ; IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°maxjk refl | Glu-wellfounded-‚â°-GluŒõI {j} {k} | Glu-wellfounded-‚â°-GluŒõO {j} {k} = record
    { t‚à∂T = t‚à∂T
    ; a‚ààEl = El-sym (Œ†‚Ä≤ jA RT) (Œ†‚Ä≤ jA‚Ä≤ RT‚Ä≤) a‚ààEl
    ; IT = IT
    ; OT = OT
    ; ‚ä¢IT = ‚ä¢IT
    ; ‚ä¢OT = ‚ä¢OT
    ; T‚âà = T‚âà
    ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record
      { IT-rel = IT-helper jA jA‚Ä≤ IT-rel 
      ; ap-rel = Œª s¬Æ b‚àà ‚Üí ap-helper refl jA jA‚Ä≤ RT RT‚Ä≤ b‚àà s¬Æ ap-rel 
      } 
    }
    where IT-helper : ‚àÄ {k‚Ä≤} ‚Üí 
                      (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      (jA‚Ä≤ : A‚Ä≤ ‚âà A ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA ‚Üí 
                      -----------------------------------
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA‚Ä≤
          IT-helper {k‚Ä≤ = k‚Ä≤} jA jA‚Ä≤ T¬Æ rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) = ¬Æ-swap jA jA‚Ä≤ T¬Æ

          ap-helper : ‚àÄ {k‚Ä≤} ‚Üí 
                      (k‚Ä≤ ‚â° k) ‚Üí 
                      (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      (jA‚Ä≤ : A‚Ä≤ ‚âà A ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      (RT : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k‚Ä≤ (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k)) )) ‚Üí 
                      (RT‚Ä≤ : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤ ‚Üí Œ†RT T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a) T (œÅ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k‚Ä≤ (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k)) )) ‚Üí 
                      (b‚àà‚Ä≤ : b ‚àà‚Ä≤ PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤) ‚Üí 
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ b ‚ààEl jA‚Ä≤ ‚Üí 
                      (‚àÄ {s b} ‚Üí Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ b ‚ààEl jA ‚Üí
                        (a‚àà : b ‚àà‚Ä≤ PERDef.El j (Œª g ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl g)) jA) ‚Üí 
                        ŒõKripke Œî (sub t œÉ $ s) (sub OT (œÉ , s ‚à∂ IT ‚Üô j)) a b (Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k)) ‚üß_‚ä¢_‚à∂_¬Æ_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ) ‚Üí      
                      --------------------------------------------------------------
                      ŒõKripke Œî (sub t œÉ $ s) (sub OT (œÉ , s ‚à∂ IT ‚Üô j)) a b (Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k))‚üß_‚ä¢_‚à∂_¬Æ_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ b‚àà‚Ä≤))
          ap-helper {k‚Ä≤ = k‚Ä≤} k‚Ä≤‚â°k jA jA‚Ä≤ RT RT‚Ä≤ b‚àà‚Ä≤ s¬Æ ap-rel rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) | ùïå-wf-gen {max j k‚Ä≤} k‚Ä≤ (Œª l<j ‚Üí Œ†O‚â§ refl l<j) | k‚Ä≤‚â°k 
             with El-sym jA‚Ä≤ jA b‚àà‚Ä≤
          ...  | b‚àà 
              with RT b‚àà | RT‚Ä≤ b‚àà‚Ä≤ | ap-rel (¬ÆEl-swap jA‚Ä≤ jA s¬Æ) b‚àà 
          ... | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚Ä≤‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
              | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚üß‚ÇÅ ; T‚âàT‚Ä≤ = T‚Ä≤‚âàT } 
              | record { fa = fa ; ‚Üòfa = ‚Üòfa ; ¬Æfa = ¬Æfa } 
              rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß ‚Üò‚ü¶T‚üß‚ÇÅ
                    | ‚ü¶‚üß-det ‚Üò‚ü¶T‚Ä≤‚üß ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ = record { fa = fa ; ‚Üòfa = ‚Üòfa ; ¬Æfa = ¬ÆEl-swap T‚âàT‚Ä≤ T‚Ä≤‚âàT ¬Æfa }      
  
  ¬ÆEl-swap (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) record { t‚à∂T = t‚à∂T ; UT = UT ; ‚ä¢UT = ‚ä¢UT ; a‚ààEl = a‚ààEl ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°j+k refl | Glu-wellfounded-‚â°-Glul {j} {k} = record
    { t‚à∂T = t‚à∂T 
    ; UT = UT 
    ; ‚ä¢UT = ‚ä¢UT 
    ; a‚ààEl = let open Unli a‚ààEl in record 
        { ua = ua 
        ; ub = ub 
        ; ‚Üòua = ‚Üòua 
        ; ‚Üòub = ‚Üòub 
        ; ua‚âàub = helper kA kA‚Ä≤ ua‚âàub 
        }
    ; T‚âà = T‚âà 
    ; krip = Œª ‚ä¢œÉ ‚Üí let open lKripke (krip ‚ä¢œÉ) in record { ua = ua ; ‚Üòua = ‚Üòua ; ¬Æua = helper2 kA kA‚Ä≤ ¬Æua }
    }
    where helper : (kA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                   (kA‚Ä≤ : A‚Ä≤ ‚âà A ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                   a ‚âà b ‚àà PERDef.El k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) kA ‚Üí 
                   -----------------------------------
                   a ‚âà b ‚àà PERDef.El k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) kA‚Ä≤
          helper kA kA‚Ä≤ a‚âàa‚Ä≤ rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = El-swap kA kA‚Ä≤ a‚âàa‚Ä≤

          helper2 : {a : D} ‚Üí 
                    (kA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                    (kA‚Ä≤ : A‚Ä≤ ‚âà A ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                    Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t) œÉ ‚à∂ sub UT œÉ ¬Æ a ‚ààEl kA ‚Üí 
                    -----------------------------------
                    Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t) œÉ ‚à∂ sub UT œÉ ¬Æ a ‚ààEl kA‚Ä≤
          helper2  kA kA‚Ä≤ ¬Æa rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = ¬ÆEl-swap kA kA‚Ä≤ ¬Æa


mutual

  ¬Æ-one-sided : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
                  (A‚âàB‚Ä≤ : A ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí
                  Œì ‚ä¢ T ¬Æ[ i ] A‚âàB ‚Üí
                  -----------------------
                  Œì ‚ä¢ T ¬Æ[ i ] A‚âàB‚Ä≤
  ¬Æ-one-sided {Œì = Œì} {T} {i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚âàC‚Ä≥ _ _) (‚ä¢T , rel) = ‚ä¢T , helper
    where helper : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí Œî ‚ä¢ T [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (C‚âàC‚Ä≥ (len Œî))) ‚à∂[ 1 + i ] Se i
          helper {Œî} {œÉ} ‚ä¢œÉ
            with C‚âàC‚Ä≤ (len Œî) | C‚âàC‚Ä≥ (len Œî) | rel ‚ä¢œÉ
          ...  | u , ‚Üòu , _ | u‚Ä≤ , ‚Üòu‚Ä≤ , _ | TœÉ‚âà
               rewrite Re-det ‚Üòu ‚Üòu‚Ä≤ = TœÉ‚âà
  ¬Æ-one-sided N‚Ä≤ N‚Ä≤ T¬Æ = T¬Æ
  ¬Æ-one-sided (U‚Ä≤ {_}) (U i‚â°1+j j‚â°j‚Ä≤) T¬Æ 
   rewrite ‚â°-irrelevant i‚â°1+j refl = T¬Æ
  ¬Æ-one-sided {_} {_} {Œì} (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ _ _) record { IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°maxjk refl | Glu-wellfounded-‚â°-GluŒõI {j} {k} |  Glu-wellfounded-‚â°-GluŒõO {j} {k} | ùïå-wf-gen {max j k} k (Œª l<j ‚Üí Œ†O‚â§ refl l<j) = record 
    { IT = IT 
    ; OT = OT 
    ; ‚ä¢IT = ‚ä¢IT 
    ; ‚ä¢OT = ‚ä¢OT 
    ; T‚âà = T‚âà 
    ; krip = Œª ‚ä¢œÉ ‚Üí 
      let open Œ†Rel (krip ‚ä¢œÉ) 
      in record 
      { IT-rel = IT-helper jA jA‚Ä≤ IT-rel 
      ; OT-rel = Œª s¬Æ a‚àà ‚Üí OT-helper refl jA jA‚Ä≤ RT RT‚Ä≤ a‚àà s¬Æ OT-rel
      } 
    }
    -- generalize k‚Ä≤ so that other irrelevant premises won't be affected by rewrite
    where IT-helper : ‚àÄ {k‚Ä≤} ‚Üí 
                      (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      (jA‚Ä≤ : A ‚âà A‚Ä≥ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA ‚Üí 
                      -----------------------------------
                      Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA‚Ä≤
          IT-helper {k‚Ä≤ = k‚Ä≤} jA jA‚Ä≤ T¬Æ rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) = ¬Æ-one-sided jA jA‚Ä≤ T¬Æ

          OT-helper : ‚àÄ {k‚Ä≤} ‚Üí (k‚Ä≤ ‚â° k) ‚Üí  
                     (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                     (jA‚Ä≤ : A ‚âà A‚Ä≥  ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                     (RT : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k‚Ä≤ (ùïå-wellfounded k‚Ä≤) )) ‚Üí 
                     (RT‚Ä≤ : ‚àÄ {a a‚Ä≥} ‚Üí a ‚âà a‚Ä≥ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤ ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≥ (œÅ‚Ä≥ ‚Ü¶ a‚Ä≥) (PERDef.ùïå k‚Ä≤ (ùïå-wellfounded k‚Ä≤) )) ‚Üí 
                     (a‚àà‚Ä≤ : a ‚àà‚Ä≤ PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤) ‚Üí 
                     Glu.‚ü¶ j ,  Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ a ‚ààEl jA‚Ä≤ ‚Üí 
                     (‚àÄ {s a} ‚Üí Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) ‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ a ‚ààEl jA ‚Üí
                       (a‚àà : a ‚àà‚Ä≤ PERDef.El j (Œª g ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl g)) jA) ‚Üí 
                       Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , ùïå-wellfounded k‚Ä≤ ‚üß Œî ‚ä¢ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ‚Üí 
                     --------------------------------------------------------------
                    Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , ùïå-wellfounded k‚Ä≤ ‚üß Œî ‚ä¢ sub OT (œÉ , s ‚à∂ IT ‚Üô j) ¬Æ Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ a‚àà‚Ä≤)
          OT-helper {k‚Ä≤ = k‚Ä≤} k‚Ä≤‚â°k jA jA‚Ä≤ RT RT‚Ä≤ a‚àà‚Ä≤ s¬Æ OT-rel rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) | k‚Ä≤‚â°k 
            with El-one-sided jA‚Ä≤ jA a‚àà‚Ä≤ 
          ... | a‚àà 
              with (RT a‚àà) | RT‚Ä≤ a‚àà‚Ä≤ | OT-rel (¬ÆEl-one-sided jA‚Ä≤ jA s¬Æ) a‚àà 
          ... | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
              | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß‚Ä≤ ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤‚ÇÅ }
              | R 
              rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß‚Ä≤ ‚Üò‚ü¶T‚üß = ¬Æ-one-sided T‚âàT‚Ä≤ T‚âàT‚Ä≤‚ÇÅ R
  ¬Æ-one-sided (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) record { UT = UT ; ‚ä¢UT = ‚ä¢UT ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°j+k refl | Glu-wellfounded-‚â°-Glul {j} {k} = record 
    { UT = UT
    ; ‚ä¢UT = ‚ä¢UT
    ; T‚âà = T‚âà
    ; krip = Œª ‚ä¢œÉ ‚Üí helper kA kA‚Ä≤ (krip ‚ä¢œÉ) 
    }
    where helper : (kA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                   (kA‚Ä≤ : A ‚âà A‚Ä≥ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                   Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))‚üß Œî ‚ä¢ sub UT œÉ ¬Æ kA ‚Üí 
                   -----------------------------------
                   Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))‚üß Œî ‚ä¢ sub UT œÉ ¬Æ kA‚Ä≤
          helper kA kA‚Ä≤ T¬Æ rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = ¬Æ-one-sided kA kA‚Ä≤ T¬Æ

  ¬ÆEl-one-sided : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
                (A‚âàB‚Ä≤ : A ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí
                Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
                ----------------------------
                Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB‚Ä≤
  ¬ÆEl-one-sided {Œì = Œì} {t} {T} {_} {i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚âàC‚Ä≥ _ _) (ne c‚âàc refl _ , glu) = (ne c‚âàc refl refl) , record 
    { t‚à∂T = t‚à∂T
    ; ‚ä¢T = ‚ä¢T
    ; krip = krip‚Ä≤ 
    }
    where open GluNe glu
          krip‚Ä≤ : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
                  -----------------------------------
                  Œî ‚ä¢ sub T œÉ ‚âà Ne‚áíExp (proj‚ÇÅ (C‚âàC‚Ä≥ (L.length Œî))) ‚à∂[ ‚Ñï.suc i ] Se i
                  √ó Œî ‚ä¢ sub t œÉ ‚âà Ne‚áíExp (proj‚ÇÅ (c‚âàc (L.length Œî))) ‚à∂[ i ] sub T œÉ
          krip‚Ä≤ {Œî} {œÉ} ‚ä¢œÉ
            with C‚âàC‚Ä≤ (len Œî) | C‚âàC‚Ä≥ (len Œî) | krip ‚ä¢œÉ
          ...  | u , ‚Üòu , _ | u‚Ä≤ , ‚Üòu‚Ä≤ , _ | TœÉ‚âà , tœÉ‚âà
               rewrite Re-det ‚Üòu ‚Üòu‚Ä≤ = TœÉ‚âà , tœÉ‚âà
  ¬ÆEl-one-sided N‚Ä≤ N‚Ä≤ t¬Æ = t¬Æ
  ¬ÆEl-one-sided (U‚Ä≤ {_}) (U i‚â°1+j j‚â°j‚Ä≤) t¬Æ 
    rewrite ‚â°-irrelevant i‚â°1+j refl = t¬Æ
  ¬ÆEl-one-sided (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ _ _) record { t‚à∂T = t‚à∂T ; a‚ààEl = a‚ààEl ; IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°maxjk refl | Glu-wellfounded-‚â°-GluŒõI {j} {k} | Glu-wellfounded-‚â°-GluŒõO {j} {k} = record
    { t‚à∂T = t‚à∂T
    ; a‚ààEl = El-one-sided (Œ†‚Ä≤ jA RT) (Œ†‚Ä≤ jA‚Ä≤ RT‚Ä≤) a‚ààEl
    ; IT = IT
    ; OT = OT
    ; ‚ä¢IT = ‚ä¢IT
    ; ‚ä¢OT = ‚ä¢OT
    ; T‚âà = T‚âà
    ; krip =  Œª ‚ä¢œÉ ‚Üí 
      let open ŒõRel (krip ‚ä¢œÉ) 
      in record 
      { IT-rel = IT-helper jA jA‚Ä≤ IT-rel
      ; ap-rel = Œª s¬Æ b‚àà ‚Üí ap-helper refl jA jA‚Ä≤ RT RT‚Ä≤ b‚àà s¬Æ ap-rel 
      } 
    }
    where IT-helper : ‚àÄ {k‚Ä≤} ‚Üí 
                  (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                  (jA‚Ä≤ : A ‚âà A‚Ä≥ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                  Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA ‚Üí 
                  -----------------------------------
                  Glu.‚ü¶ j , Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ sub IT œÉ ¬Æ jA‚Ä≤
          IT-helper {k‚Ä≤ = k‚Ä≤} jA jA‚Ä≤ T¬Æ rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) = ¬Æ-one-sided jA jA‚Ä≤ T¬Æ
          ap-helper : ‚àÄ {k‚Ä≤} ‚Üí 
                     (k‚Ä≤ ‚â° k) ‚Üí 
                     (jA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                     (jA‚Ä≤ : A ‚âà A‚Ä≥ ‚àà PERDef.ùïå j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))) ‚Üí 
                     (RT : ‚àÄ {a a‚Ä≤} ‚Üí a ‚âà a‚Ä≤ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≤ (œÅ‚Ä≤ ‚Ü¶ a‚Ä≤) (PERDef.ùïå k‚Ä≤ (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k)) )) ‚Üí 
                     (RT‚Ä≤ : ‚àÄ {a a‚Ä≥} ‚Üí a ‚âà a‚Ä≥ ‚àà PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤ ‚Üí Œ†RT T (œÅ ‚Ü¶ a) T‚Ä≥ (œÅ‚Ä≥ ‚Ü¶ a‚Ä≥ ) (PERDef.ùïå k‚Ä≤ (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k)) )) ‚Üí 
                     (b‚àà‚Ä≤ : b ‚àà‚Ä≤ PERDef.El j (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j)) jA‚Ä≤) ‚Üí 
                     Glu.‚ü¶ j ,  Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ b ‚ààEl jA‚Ä≤ ‚Üí 
                     (‚àÄ {s b} ‚Üí Glu.‚ü¶ j ,  Glu-wellfounded j , (Œª l<j ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl l<j))‚üß Œî ‚ä¢ s ‚à∂ sub IT œÉ ¬Æ b ‚ààEl jA ‚Üí
                       (a‚àà : b ‚àà‚Ä≤ PERDef.El j (Œª g ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†I‚â§ refl g)) jA) ‚Üí 
                       ŒõKripke Œî (sub t œÉ $ s) (sub OT (œÉ , s ‚à∂ IT ‚Üô j)) a b (Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k)) ‚üß_‚ä¢_‚à∂_¬Æ_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ) ‚Üí      
                     --------------------------------------------------------------
                     ŒõKripke Œî (sub t œÉ $ s) (sub OT (œÉ , s ‚à∂ IT ‚Üô j)) a b (Glu.‚ü¶ k‚Ä≤ , Glu-wellfounded k‚Ä≤ , (Œª l<k ‚Üí ùïå-wellfounded (max j k‚Ä≤) (Œ†O‚â§ refl l<k))‚üß_‚ä¢_‚à∂_¬Æ_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ b‚àà‚Ä≤))
          ap-helper {k‚Ä≤ = k‚Ä≤} k‚Ä≤‚â°k jA jA‚Ä≤ RT RT‚Ä≤ b‚àà‚Ä≤ s¬Æ ap-rel rewrite ùïå-wf-gen {max j k‚Ä≤} j (Œª l<j ‚Üí Œ†I‚â§ refl l<j) | ùïå-wf-gen {max j k‚Ä≤} k‚Ä≤ (Œª l<j ‚Üí Œ†O‚â§ refl l<j) | k‚Ä≤‚â°k 
             with El-one-sided jA‚Ä≤ jA b‚àà‚Ä≤
          ... | b‚àà 
              with RT b‚àà | RT‚Ä≤ b‚àà‚Ä≤ | ap-rel (¬ÆEl-one-sided jA‚Ä≤ jA s¬Æ) b‚àà
          ... | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
              | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß‚Ä≤ ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤‚ÇÅ } 
              | R  
                rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß‚Ä≤ ‚Üò‚ü¶T‚üß = record { fa = fa ; ‚Üòfa = ‚Üòfa ; ¬Æfa = ¬ÆEl-one-sided T‚âàT‚Ä≤ T‚âàT‚Ä≤‚ÇÅ ¬Æfa }
              where open ŒõKripke R

  ¬ÆEl-one-sided (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ _ _) record { t‚à∂T = t‚à∂T ; UT = UT ; ‚ä¢UT = ‚ä¢UT ; a‚ààEl = a‚ààEl ; T‚âà = T‚âà ; krip = krip } 
    rewrite ‚â°-irrelevant i‚â°j+k refl | Glu-wellfounded-‚â°-Glul {j} {k} = record 
    { t‚à∂T = t‚à∂T 
    ; UT = UT 
    ; ‚ä¢UT = ‚ä¢UT 
    ; a‚ààEl = 
      let open Unli a‚ààEl 
      in record 
      { ua = ua 
      ; ub = ub 
      ; ‚Üòua = ‚Üòua 
      ; ‚Üòub = ‚Üòub 
      ; ua‚âàub = helper kA kA‚Ä≤ ua‚âàub 
      } 
    ; T‚âà = T‚âà 
    ; krip = Œª ‚ä¢œÉ ‚Üí 
      let open lKripke (krip ‚ä¢œÉ) 
      in record 
      { ua = ua 
      ; ‚Üòua = ‚Üòua 
      ; ¬Æua = helper2 kA kA‚Ä≤ ¬Æua  
      } 
    }
    where helper : (kA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                   (kA‚Ä≤ : A ‚âà A‚Ä≥ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                   a ‚âà b ‚àà PERDef.El k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) kA ‚Üí 
                   -----------------------------------
                   a ‚âà b ‚àà PERDef.El k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) kA‚Ä≤
          helper kA kA‚Ä≤ a‚âàa‚Ä≤ rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = El-one-sided kA kA‚Ä≤ a‚âàa‚Ä≤

          helper2 : {a : D} ‚Üí 
                    (kA : A ‚âà A‚Ä≤ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                    (kA‚Ä≤ : A ‚âà A‚Ä≥ ‚àà PERDef.ùïå k (Œª l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k))) ‚Üí 
                    Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t) œÉ ‚à∂ sub UT œÉ ¬Æ a ‚ààEl kA ‚Üí 
                    -----------------------------------
                    Glu.‚ü¶ k , Glu-wellfounded k , (Œª {l} l<k ‚Üí ùïå-wellfounded (j + k) (Li‚â§ refl l<k)) ‚üß Œî ‚ä¢ sub (unlift t) œÉ ‚à∂ sub UT œÉ ¬Æ a ‚ààEl kA‚Ä≤
          helper2  kA kA‚Ä≤ ¬Æa rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) = ¬ÆEl-one-sided kA kA‚Ä≤ ¬Æa
              