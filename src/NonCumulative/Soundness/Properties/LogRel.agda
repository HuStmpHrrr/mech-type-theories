{-# OPTIONS --without-K --safe #-}

open import Level hiding (_‚äî_)
open import Axiom.Extensionality.Propositional

-- Properties of the gluing models for terms and types
module NonCumulative.Soundness.Properties.LogRel (fext : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí Extensionality ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where

open import Lib
open import Data.Nat
open import Data.Nat.Properties as ‚Ñï‚Çö

open import NonCumulative.Statics.Ascribed.Misc
open import NonCumulative.Statics.Ascribed.Presup
open import NonCumulative.Statics.Ascribed.Properties
open import NonCumulative.Statics.Ascribed.Properties.Contexts
open import NonCumulative.Statics.Ascribed.Properties.Subst
open import NonCumulative.Statics.Ascribed.CtxEquiv
open import NonCumulative.Statics.Ascribed.Refl
open import NonCumulative.Semantics.Readback
open import NonCumulative.Semantics.Properties.PER (fext)
open import NonCumulative.Soundness.Weakening
open import NonCumulative.Soundness.LogRel

open import NonCumulative.Soundness.Properties.NoFunExt.LogRel public

Glu-wellfounded-‚â°‚Ä≤ : ‚àÄ {j i i‚Ä≤} ‚Üí (j<i : j < i) ‚Üí (j<i‚Ä≤ : j < i‚Ä≤) ‚Üí
  (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i j<i univ {A} {B}) ‚â° (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i‚Ä≤ j<i‚Ä≤ univ {A} {B})
Glu-wellfounded-‚â°‚Ä≤ {j} {i} {i‚Ä≤} (s‚â§s {j} j<i) (s‚â§s {j} j<i‚Ä≤) = fext Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) ‚Üí cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí
    Glu.‚ü¶ j , rc , univ ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) (‚â§-trans j‚Ä≤<j j<i‚Ä≤))

Glu-wellfounded-‚â° : ‚àÄ {i j} (j<i : j < i) ‚Üí (Œª {A B} ‚Üí Glu-wellfounded i {j} j<i (ùïå-wellfounded j) {A} {B}) ‚â° (_‚ä¢_¬Æ[ j ]_)
Glu-wellfounded-‚â° {j = j} (s‚â§s j<i) = cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí Glu.‚ü¶ j , rc , ùïå-wellfounded j ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) j‚Ä≤<j)

Glu-wf-gen : ‚àÄ {i‚Ä≤} i ‚Üí (f : ‚àÄ {j} ‚Üí j < i ‚Üí j < i‚Ä≤) ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (i‚Ä≤) {l} (f l<k)) ‚â° Glu-wellfounded i
Glu-wf-gen {i‚Ä≤} i f = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (f l<k) l<k))

 -- If t and a are related, then a is in the El PER model.
¬ÆEl‚áí‚ààEl : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
          Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
          -----------------------------
          a ‚àà‚Ä≤ El i A‚âàB
¬ÆEl‚áí‚ààEl (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°‚Ä≤i , rel) = ne c‚âàc j‚â°i j‚â°‚Ä≤i
¬ÆEl‚áí‚ààEl N‚Ä≤ (t¬ÆNat , T‚âàN) = ¬ÆNat‚áí‚ààNat t¬ÆNat
¬ÆEl‚áí‚ààEl {a = a} {i = i} (U‚Ä≤ {j}) t¬Æ
  rewrite ùïå-‚â°-gen j U‚â§‚Ä≤
        | ùïå-wf-gen j (U‚â§ refl) = A‚ààùïå
  where open GluU t¬Æ
¬ÆEl‚áí‚ààEl (Œ† eq jA RT j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open GluŒõ t¬Æ
¬ÆEl‚áí‚ààEl (L eq A‚âàA‚Ä≤ j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open Glul t¬Æ

¬ÆEl‚áí¬Æ : ‚àÄ { i } ‚Üí (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
        Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
        ----------------------------
        Œì ‚ä¢ T ¬Æ[ i ] A‚âàB
¬ÆEl‚áí¬Æ (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°√≠ , record { t‚à∂T = t‚à∂T ; ‚ä¢T = ‚ä¢T ; krip = krip }) = ‚ä¢T , Œª ‚ä¢œÉ ‚Üí proj‚ÇÅ (krip ‚ä¢œÉ)
¬ÆEl‚áí¬Æ N‚Ä≤ (_ , T‚âàN) = T‚âàN
¬ÆEl‚áí¬Æ (U _ _) t¬Æ = GluU.T‚âà t¬Æ
¬ÆEl‚áí¬Æ (Œ†‚Ä≤ {j = j} {k = k} jA RT) t¬Æ
  rewrite ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl) = record
    { IT   = IT
    ; OT   = OT
    ; ‚ä¢IT  = ‚ä¢IT
    ; ‚ä¢OT  = ‚ä¢OT
    ; T‚âà   = T‚âà
    ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record
        { IT-rel = IT-rel
        ; OT-rel = Œª s¬Æ a‚àà ‚Üí let open ŒõKripke (ap-rel s¬Æ a‚àà) in ¬ÆEl‚áí¬Æ (Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ¬Æfa
        }
    }
    where open GluŒõ t¬Æ
¬ÆEl‚áí¬Æ (L‚Ä≤ {j} {k} kA) t¬Æ
  rewrite ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
    { UT   = UT
    ; ‚ä¢UT  = ‚ä¢UT
    ; T‚âà   = T‚âà
    ; krip = Œª ‚ä¢œÉ ‚Üí let open lKripke (krip ‚ä¢œÉ) in ¬ÆEl‚áí¬Æ kA ¬Æua
    }
    where open Glul t¬Æ

-- If t and a are related, then the type of t is well-formed.
¬ÆEl‚áíty : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
           Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
           ---------------------------
           Œì ‚ä¢ T ‚à∂[ 1 + i ] Se i
¬ÆEl‚áíty A‚âàB t‚àºa = ¬Æ‚áíty A‚âàB (¬ÆEl‚áí¬Æ A‚âàB t‚àºa)

-- ¬ÆEl respects term equivalence.
¬ÆEl-resp-‚âà : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
             Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
             Œì ‚ä¢ t ‚âà t‚Ä≤ ‚à∂[ i ] T ‚Üí
             ----------------------------
             Œì ‚ä¢ t‚Ä≤ ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB
¬ÆEl-resp-‚âà (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc‚Ä≤ refl _ , glu) t‚âàt‚Ä≤ = ne‚Ä≤ c‚âàc‚Ä≤ , record
  { t‚à∂T  = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
  ; ‚ä¢T   = ‚ä¢T
  ; krip = Œª ‚ä¢œÉ ‚Üí proj‚ÇÅ (krip ‚ä¢œÉ) , ‚âà-trans ([]-cong (‚âà-sym t‚âàt‚Ä≤) (s-‚âà-refl (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))) (proj‚ÇÇ (krip ‚ä¢œÉ))
  }
  where open GluNe glu
¬ÆEl-resp-‚âà N‚Ä≤ (t¬Æ , T‚âàN) t‚âàt‚Ä≤ = ¬ÆNat-resp-‚âà t¬Æ (‚âà-conv t‚âàt‚Ä≤ T‚âàN) , T‚âàN
¬ÆEl-resp-‚âà (U‚Ä≤ {j}) t¬Æ t‚âàt‚Ä≤
  rewrite ùïå-wf-gen j (U‚â§ refl)
        | Glu-wf-gen {j} j U‚â§‚Ä≤ = record
    { t‚à∂T = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
    ; T‚âà  = T‚âà
    ; A‚ààùïå = A‚ààùïå
    ; rel = ¬Æ-resp-‚âà A‚ààùïå rel (‚âà-conv t‚âàt‚Ä≤ T‚âà)
    }
    where open GluU t¬Æ
¬ÆEl-resp-‚âà {Œì = Œì} {t = t} {t‚Ä≤ = t‚Ä≤} (Œ†‚Ä≤ {j = j} {k = k} jA RT) t¬Æ t‚âàt‚Ä≤
  rewrite ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
        | ùïå-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
        | Glu-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl) = record
    { t‚à∂T  = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
    ; a‚ààEl = a‚ààEl
    ; IT   = IT
    ; OT   = OT
    ; ‚ä¢IT  = ‚ä¢IT
    ; ‚ä¢OT  = ‚ä¢OT
    ; T‚âà   = T‚âà
    ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record
        { IT-rel = IT-rel
        ; ap-rel = Œª t¬Æ b‚àà ‚Üí
          let open ŒõKripke (ap-rel t¬Æ b‚àà)
          in record
            { fa = fa
            ; ‚Üòfa = ‚Üòfa
            ; ¬Æfa = ¬ÆEl-resp-‚âà (Œ†RT.T‚âàT‚Ä≤ (RT b‚àà)) ¬Æfa (t[œÉ]‚âàt‚Ä≤[œÉ]s (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ) (¬ÆEl‚áítm jA t¬Æ))
            }
        }
    }
    where open GluŒõ t¬Æ
          t[œÉ]‚âàt‚Ä≤[œÉ]s : Œî ‚ä¢s œÉ ‚à∂ Œì ‚Üí
               Œî ‚ä¢ s ‚à∂[ j ] IT [ œÉ ] ‚Üí
               ----------------------
               Œî ‚ä¢ t [ œÉ ] $ s ‚âà t‚Ä≤ [ œÉ ] $ s ‚à∂[ k ] OT [ œÉ , s ‚à∂ IT ‚Üô j ]
          t[œÉ]‚âàt‚Ä≤[œÉ]s ‚ä¢œÉ‚Ä≤ ‚ä¢s = ‚âà-conv ($-cong Œî‚ä¢IT[œÉ] Œî‚ä¢OT[œÉ]
                                              (‚âà-conv ([]-cong t‚âàt‚Ä≤ (s-‚âà-refl ‚ä¢œÉ‚Ä≤)) (‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉ‚Ä≤) (Œ†-[] ‚ä¢œÉ‚Ä≤ ‚ä¢IT ‚ä¢OT refl)))
                                              (‚âà-refl ‚ä¢s) refl)
                                      (‚âà-trans ([‚àò]-Se ‚ä¢OT IT,Œî‚ä¢s (‚ä¢I,t ‚ä¢Œî Œî‚ä¢IT[œÉ] ‚ä¢s))
                                               ([]-cong-Se‚Ä≥ ‚ä¢OT
                                                            (s-‚àò (s-, (s-I ‚ä¢Œî) Œî‚ä¢IT[œÉ] (conv ‚ä¢s (‚âà-sym ([I] Œî‚ä¢IT[œÉ])))) IT,Œî‚ä¢s)
                                                            (qœÉ‚àò[I,t]‚âàœÉ,t ‚ä¢Œî ‚ä¢IT ‚ä¢œÉ‚Ä≤ ‚ä¢s)))
            where ‚ä¢Œî      = (proj‚ÇÅ (presup-s ‚ä¢œÉ‚Ä≤))
                  Œî‚ä¢IT[œÉ] = t[œÉ]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤
                  IT,Œî‚ä¢s  = ‚ä¢q ‚ä¢Œî ‚ä¢œÉ‚Ä≤ ‚ä¢IT
                  Œî‚ä¢OT[œÉ] = t[œÉ]-Se ‚ä¢OT IT,Œî‚ä¢s

¬ÆEl-resp-‚âà {i = i} (L‚Ä≤ {j = j} {k = k} kA) t¬Æ t‚âàt‚Ä≤
  rewrite ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
    { t‚à∂T  = proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ (presup-‚âà t‚âàt‚Ä≤)))
    ; UT   = UT
    ; ‚ä¢UT  = ‚ä¢UT
    ; a‚ààEl = a‚ààEl
    ; T‚âà   = T‚âà
    ; krip = Œª ‚ä¢œÉ ‚Üí
        let open lKripke (krip ‚ä¢œÉ) in record
        { ua = ua
        ; ‚Üòua = ‚Üòua
        ; ¬Æua = ¬ÆEl-resp-‚âà kA ¬Æua ([]-cong (unlift-cong j ‚ä¢UT (‚âà-conv t‚âàt‚Ä≤ T‚âà)) (s-‚âà-refl (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)))
        }
    }
    where open Glul t¬Æ

-- ¬ÆEl respects context stack equivalence.
¬ÆEl-resp-‚ä¢‚âà : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
              Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
              ‚ä¢ Œì ‚âà Œî ‚Üí
              ---------------------------
              Œî ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB
¬ÆEl-resp-‚ä¢‚âà (ne‚Ä≤ _) (ne c‚âàc‚Ä≤ refl _ , glu) Œì‚âàŒî = (ne‚Ä≤ c‚âàc‚Ä≤) , record
  { t‚à∂T = ctxeq-tm Œì‚âàŒî t‚à∂T
  ; ‚ä¢T = ctxeq-tm Œì‚âàŒî ‚ä¢T
  ; krip = Œª ‚ä¢œÉ ‚Üí krip (‚ä¢w-resp-‚ä¢‚âà ≥ ‚ä¢œÉ (‚ä¢‚âà-sym Œì‚âàŒî))
  }
  where open GluNe glu
¬ÆEl-resp-‚ä¢‚âà N‚Ä≤ (t¬ÆN , T‚âàN) Œì‚âàŒî = (¬ÆNat-resp-‚ä¢‚âà t¬ÆN Œì‚âàŒî) , ctxeq-‚âà Œì‚âàŒî T‚âàN
¬ÆEl-resp-‚ä¢‚âà (U‚Ä≤ {j}) t¬Æ Œì‚âàŒî
  rewrite ùïå-wf-gen j (U‚â§ refl)
        | Glu-wf-gen {j} j U‚â§‚Ä≤ = record
    { t‚à∂T = ctxeq-tm Œì‚âàŒî t‚à∂T
    ; T‚âà  = ctxeq-‚âà Œì‚âàŒî T‚âà
    ; A‚ààùïå = A‚ààùïå
    ; rel = ¬Æ-resp-‚ä¢‚âà A‚ààùïå rel Œì‚âàŒî
    }
    where open GluU t¬Æ
¬ÆEl-resp-‚ä¢‚âà (Œ†‚Ä≤ _ _) t¬Æ Œì‚âàŒî =
  let Œî‚ä¢IT = ctxeq-tm Œì‚âàŒî ‚ä¢IT in record
    { t‚à∂T  = ctxeq-tm Œì‚âàŒî t‚à∂T
    ; a‚ààEl = a‚ààEl
    ; IT   = IT
    ; OT   = OT
    ; ‚ä¢IT  = Œî‚ä¢IT
    ; ‚ä¢OT  = ctxeq-tm (‚à∑-cong Œì‚âàŒî ‚ä¢IT Œî‚ä¢IT (‚âà-refl ‚ä¢IT) (‚âà-refl Œî‚ä¢IT)) ‚ä¢OT
    ; T‚âà   = ctxeq-‚âà Œì‚âàŒî T‚âà
    ; krip = Œª ‚ä¢œÉ ‚Üí krip (‚ä¢w-resp-‚ä¢‚âà ≥ ‚ä¢œÉ (‚ä¢‚âà-sym Œì‚âàŒî))
    }
    where open GluŒõ t¬Æ
¬ÆEl-resp-‚ä¢‚âà (L‚Ä≤ _) t¬Æ Œì‚âàŒî = record
  { t‚à∂T  = ctxeq-tm Œì‚âàŒî t‚à∂T
  ; UT   = UT
  ; ‚ä¢UT  = ctxeq-tm Œì‚âàŒî ‚ä¢UT
  ; a‚ààEl = a‚ààEl
  ; T‚âà   = ctxeq-‚âà Œì‚âàŒî T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí krip (‚ä¢w-resp-‚ä¢‚âà ≥ ‚ä¢œÉ (‚ä¢‚âà-sym Œì‚âàŒî))
  }
  where open Glul t¬Æ

mutual
  ¬Æ-swap : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
           (B‚âàA : B ‚âà A ‚àà ùïå i) ‚Üí
           Œì ‚ä¢ T ¬Æ[ i ] A‚âàB ‚Üí
           -----------------------
           Œì ‚ä¢ T ¬Æ[ i ] B‚âàA
  ¬Æ-swap {Œì = Œì} {T} {i = i} (ne‚Ä≤ c‚âàc‚Ä≤) (ne c‚Ä≤‚âàc _ _) (‚ä¢T , krip) = ‚ä¢T , helper
    where
      helper : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
               -----------------------------------
               Œî ‚ä¢ T [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (c‚Ä≤‚âàc (len Œî))) ‚à∂[ 1 + i ] Se i
      helper {Œî} {œÉ} ‚ä¢œÉ
        with c‚âàc‚Ä≤ (len Œî) | c‚Ä≤‚âàc (len Œî) | krip ‚ä¢œÉ
      ...  | _ , ‚Üòu , _ | _ , _ , ‚Üòu‚ÇÅ | TœÉ‚âà
          rewrite Re-det ‚Üòu ‚Üòu‚ÇÅ = TœÉ‚âà
  ¬Æ-swap N‚Ä≤ N‚Ä≤ T¬Æ = T¬Æ
  ¬Æ-swap U‚Ä≤ (U i‚â°1+j j‚â°j‚Ä≤) T¬Æ
    rewrite ‚â°-irrelevant i‚â°1+j refl = T¬Æ
  ¬Æ-swap {_} {_} {Œì} (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) T¬Æ
    rewrite ‚â°-irrelevant i‚â°maxjk refl
          | ùïå-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
          | Glu-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl) = record
      { IT   = IT
      ; OT   = OT
      ; ‚ä¢IT  = ‚ä¢IT
      ; ‚ä¢OT  = ‚ä¢OT
      ; T‚âà   = T‚âà
      ; krip = Œª ‚ä¢œÉ ‚Üí let open Œ†Rel (krip ‚ä¢œÉ) in record
        { IT-rel = ¬Æ-swap jA jA‚Ä≤ IT-rel
        ; OT-rel = Œª s¬Æ a‚àà ‚Üí OT-helper a‚àà s¬Æ OT-rel
        }
      }
      where open GluŒ† T¬Æ
            OT-helper : (a‚àà‚Ä≤ : a ‚àà‚Ä≤ El j jA‚Ä≤) ‚Üí
                        Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] a ‚ààEl jA‚Ä≤ ‚Üí
                        (‚àÄ {s a} ‚Üí Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] a ‚ààEl jA ‚Üí
                          (a‚àà : a ‚àà‚Ä≤ El j jA) ‚Üí
                          Œî ‚ä¢ OT [ œÉ , s ‚à∂ IT ‚Üô j ] ¬Æ[ k ] Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ‚Üí
                        --------------------------------------------------------------
                        Œî ‚ä¢ OT [ œÉ , s ‚à∂ IT ‚Üô j ] ¬Æ[ k ] Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ a‚àà‚Ä≤)
            OT-helper a‚àà‚Ä≤ s¬Æ OT-rel
              with El-sym jA‚Ä≤ jA a‚àà‚Ä≤
            ...  | a‚àà
                with RT a‚àà | RT‚Ä≤ a‚àà‚Ä≤ | OT-rel (¬ÆEl-swap jA‚Ä≤ jA s¬Æ) a‚àà
            ...    | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚Ä≤‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
                  | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚üß‚ÇÅ ; T‚âàT‚Ä≤ = T‚Ä≤‚âàT }
                  | R
                  rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß ‚Üò‚ü¶T‚üß‚ÇÅ
                        | ‚ü¶‚üß-det ‚Üò‚ü¶T‚Ä≤‚üß ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ = ¬Æ-swap T‚âàT‚Ä≤ T‚Ä≤‚âàT R
  ¬Æ-swap (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ _ _) T¬Æ
    rewrite ‚â°-irrelevant i‚â°j+k refl
          | ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
      { UT   = UT
      ; ‚ä¢UT  = ‚ä¢UT
      ; T‚âà   = T‚âà
      ; krip = Œª ‚ä¢œÉ ‚Üí ¬Æ-swap kA kA‚Ä≤ (krip ‚ä¢œÉ)
      }
      where open GluL T¬Æ

  ¬ÆEl-swap : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
             (B‚âàA : B ‚âà A ‚àà ùïå i) ‚Üí
             Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
             ----------------------------
             Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl B‚âàA
  ¬ÆEl-swap {_} {_} {Œì} {t} {T} {i = i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚Ä≤‚âàC _ _) (ne c‚âàc refl _ , glu) = (ne c‚âàc refl refl) , record
    { t‚à∂T  = t‚à∂T
    ; ‚ä¢T   = ‚ä¢T
    ; krip = Œª ‚ä¢œÉ ‚Üí krip‚Ä≤ ‚ä¢œÉ
    }
    where
      open GluNe glu
      krip‚Ä≤ : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
               -----------------------------------
               Œî ‚ä¢ T [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (C‚Ä≤‚âàC (L.length Œî))) ‚à∂[ 1 + i ] Se i
                 √ó Œî ‚ä¢ t [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (c‚âàc (L.length Œî))) ‚à∂[ i ] T [ œÉ ]
      krip‚Ä≤ {Œî} {œÉ} ‚ä¢œÉ
        with C‚âàC‚Ä≤ (len Œî) | C‚Ä≤‚âàC (len Œî) | krip ‚ä¢œÉ
      ...  | _ , ‚Üòu , _ | _ , _ , ‚Üòu‚ÇÅ | TœÉ‚âà , tœÉ‚âà
           rewrite Re-det ‚Üòu ‚Üòu‚ÇÅ = TœÉ‚âà , tœÉ‚âà
  ¬ÆEl-swap N‚Ä≤ N‚Ä≤ T¬Æ = T¬Æ
  ¬ÆEl-swap U‚Ä≤ (U i‚â°1+j j‚â°j‚Ä≤) T¬Æ
    rewrite ‚â°-irrelevant i‚â°1+j refl = T¬Æ
  ¬ÆEl-swap (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) t¬Æ
    rewrite ‚â°-irrelevant i‚â°maxjk refl
          | ùïå-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
          | Glu-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl) = record
      { t‚à∂T  = t‚à∂T
      ; a‚ààEl = El-Œ†-ùïå i‚â°maxjk jA‚Ä≤ RT‚Ä≤ (El-swap (proj‚ÇÅ Œ†-bund) (Œ†-ùïå jA‚Ä≤ RT‚Ä≤ i‚â°maxjk) (proj‚ÇÇ Œ†-bund))
      ; IT   = IT
      ; OT   = OT
      ; ‚ä¢IT  = ‚ä¢IT
      ; ‚ä¢OT  = ‚ä¢OT
      ; T‚âà   = T‚âà
      ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record
        { IT-rel = ¬Æ-swap jA jA‚Ä≤ IT-rel
        ; ap-rel = Œª s¬Æ b‚àà ‚Üí ap-helper b‚àà s¬Æ ap-rel
        }
      }
      where open GluŒõ t¬Æ
            Œ†-bund = Œ†-bundle jA (Œª a‚âàa‚Ä≤ ‚Üí RT a‚âàa‚Ä≤ , a‚ààEl a‚âàa‚Ä≤) refl
            ap-helper : (b‚àà‚Ä≤ : b ‚àà‚Ä≤ El j jA‚Ä≤) ‚Üí
                        Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] b ‚ààEl jA‚Ä≤ ‚Üí
                        (‚àÄ {s b} ‚Üí Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] b ‚ààEl jA ‚Üí
                          (a‚àà : b ‚àà‚Ä≤ El j jA) ‚Üí
                          ŒõKripke Œî (t [ œÉ ] $ s) (OT [ œÉ , s ‚à∂ IT ‚Üô j ]) a b (_‚ä¢_‚à∂_¬Æ[ k ]_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ) ‚Üí
                        --------------------------------------------------------------
                        ŒõKripke Œî (t [ œÉ ] $ s) (OT [ œÉ , s ‚à∂ IT ‚Üô j ]) a b (_‚ä¢_‚à∂_¬Æ[ k ]_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ b‚àà‚Ä≤))
            ap-helper b‚àà‚Ä≤ s¬Æ ap-rel
              with El-sym jA‚Ä≤ jA b‚àà‚Ä≤
            ...  | b‚àà
                with RT b‚àà | RT‚Ä≤ b‚àà‚Ä≤ | ap-rel (¬ÆEl-swap jA‚Ä≤ jA s¬Æ) b‚àà
            ...    | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚Ä≤‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
                   | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚üß‚ÇÅ ; T‚âàT‚Ä≤ = T‚Ä≤‚âàT }
                   | record { fa = fa ; ‚Üòfa = ‚Üòfa ; ¬Æfa = ¬Æfa }
                  rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß ‚Üò‚ü¶T‚üß‚ÇÅ
                        | ‚ü¶‚üß-det ‚Üò‚ü¶T‚Ä≤‚üß ‚Üò‚ü¶T‚Ä≤‚üß‚ÇÅ = record
                    { fa = fa
                    ; ‚Üòfa = ‚Üòfa
                    ; ¬Æfa = ¬ÆEl-swap T‚âàT‚Ä≤ T‚Ä≤‚âàT ¬Æfa
                    }

  ¬ÆEl-swap (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) t¬Æ
    rewrite ‚â°-irrelevant i‚â°j+k refl
          | ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
      { t‚à∂T   = t‚à∂T
      ; UT    = UT
      ; ‚ä¢UT   = ‚ä¢UT
      ; a‚ààEl  = El-L-ùïå kA‚Ä≤ i‚â°j+k (El-swap (proj‚ÇÅ L-bund) (L-ùïå kA‚Ä≤ i‚â°j+k) (proj‚ÇÇ L-bund))
      ; T‚âà    = T‚âà
      ; krip  = Œª ‚ä¢œÉ ‚Üí let open lKripke (krip ‚ä¢œÉ) in record
        { ua  = ua
        ; ‚Üòua = ‚Üòua
        ; ¬Æua = ¬ÆEl-swap kA kA‚Ä≤ ¬Æua
        }
      }
      where open Glul t¬Æ
            L-bund = L-bundle {j = j} kA a‚ààEl refl

mutual

  ¬Æ-one-sided : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
                  (A‚âàB‚Ä≤ : A ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí
                  Œì ‚ä¢ T ¬Æ[ i ] A‚âàB ‚Üí
                  -----------------------
                  Œì ‚ä¢ T ¬Æ[ i ] A‚âàB‚Ä≤
  ¬Æ-one-sided {Œì = Œì} {T} {i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚âàC‚Ä≥ _ _) (‚ä¢T , rel) = ‚ä¢T , helper
    where helper : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí Œî ‚ä¢ T [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (C‚âàC‚Ä≥ (len Œî))) ‚à∂[ 1 + i ] Se i
          helper {Œî} {œÉ} ‚ä¢œÉ
            with C‚âàC‚Ä≤ (len Œî) | C‚âàC‚Ä≥ (len Œî) | rel ‚ä¢œÉ
          ... | u , ‚Üòu , _ | u‚Ä≤ , ‚Üòu‚Ä≤ , _ | TœÉ‚âà
               rewrite Re-det ‚Üòu ‚Üòu‚Ä≤ = TœÉ‚âà
  ¬Æ-one-sided N‚Ä≤ N‚Ä≤ T¬Æ = T¬Æ
  ¬Æ-one-sided U‚Ä≤ (U i‚â°1+j j‚â°j‚Ä≤) T¬Æ
   rewrite ‚â°-irrelevant i‚â°1+j refl = T¬Æ
  ¬Æ-one-sided {_} {_} {Œì} (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ _ _) T¬Æ
    rewrite ‚â°-irrelevant i‚â°maxjk refl
          | ùïå-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
          | Glu-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
    = record
      { IT   = IT
      ; OT   = OT
      ; ‚ä¢IT  = ‚ä¢IT
      ; ‚ä¢OT  = ‚ä¢OT
      ; T‚âà   = T‚âà
      ; krip = Œª ‚ä¢œÉ ‚Üí
        let open Œ†Rel (krip ‚ä¢œÉ)
        in record
        { IT-rel = ¬Æ-one-sided jA jA‚Ä≤ IT-rel
        ; OT-rel = Œª s¬Æ a‚àà ‚Üí OT-helper a‚àà s¬Æ OT-rel
        }
      }
      where open GluŒ† T¬Æ
            OT-helper : (a‚àà‚Ä≤ : a ‚àà‚Ä≤ El j jA‚Ä≤) ‚Üí
                        Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] a ‚ààEl jA‚Ä≤ ‚Üí
                        (‚àÄ {s a} ‚Üí Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] a ‚ààEl jA ‚Üí
                          (a‚àà : a ‚àà‚Ä≤ El j jA) ‚Üí
                          Œî ‚ä¢ OT [ œÉ , s ‚à∂ IT ‚Üô j ] ¬Æ[ k ] Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ‚Üí
                        --------------------------------------------------------------
                        Œî ‚ä¢ OT [ œÉ , s ‚à∂ IT ‚Üô j ] ¬Æ[ k ] Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ a‚àà‚Ä≤)
            OT-helper a‚àà‚Ä≤ s¬Æ OT-rel
              with El-one-sided jA‚Ä≤ jA a‚àà‚Ä≤
            ...  | a‚àà
                with RT a‚àà | RT‚Ä≤ a‚àà‚Ä≤ | OT-rel (¬ÆEl-one-sided jA‚Ä≤ jA s¬Æ) a‚àà
            ...    | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
                   | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß‚Ä≤ ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤‚ÇÅ }
                   | R
                  rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß‚Ä≤ ‚Üò‚ü¶T‚üß = ¬Æ-one-sided T‚âàT‚Ä≤ T‚âàT‚Ä≤‚ÇÅ R
  ¬Æ-one-sided (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ j‚â°j‚Ä≤ k‚â°k‚Ä≤) T¬Æ
    rewrite ‚â°-irrelevant i‚â°j+k refl
          | ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
      { UT   = UT
      ; ‚ä¢UT  = ‚ä¢UT
      ; T‚âà   = T‚âà
      ; krip = Œª ‚ä¢œÉ ‚Üí ¬Æ-one-sided kA kA‚Ä≤ (krip ‚ä¢œÉ)
      }
      where open GluL T¬Æ

  ¬ÆEl-one-sided : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
                (A‚âàB‚Ä≤ : A ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí
                Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
                ----------------------------
                Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB‚Ä≤
  ¬ÆEl-one-sided {Œì = Œì} {t} {T} {_} {i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚âàC‚Ä≥ _ _) (ne c‚âàc refl _ , glu) = (ne c‚âàc refl refl) , record
    { t‚à∂T  = t‚à∂T
    ; ‚ä¢T   = ‚ä¢T
    ; krip = krip‚Ä≤
    }
    where open GluNe glu
          krip‚Ä≤ : Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
                  -----------------------------------
                  Œî ‚ä¢ T [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (C‚âàC‚Ä≥ (L.length Œî))) ‚à∂[ ‚Ñï.suc i ] Se i
                  √ó Œî ‚ä¢ t [ œÉ ] ‚âà Ne‚áíExp (proj‚ÇÅ (c‚âàc (L.length Œî))) ‚à∂[ i ] T [ œÉ ]
          krip‚Ä≤ {Œî} {œÉ} ‚ä¢œÉ
            with C‚âàC‚Ä≤ (len Œî) | C‚âàC‚Ä≥ (len Œî) | krip ‚ä¢œÉ
          ...  | u , ‚Üòu , _ | u‚Ä≤ , ‚Üòu‚Ä≤ , _ | TœÉ‚âà , tœÉ‚âà
               rewrite Re-det ‚Üòu ‚Üòu‚Ä≤ = TœÉ‚âà , tœÉ‚âà
  ¬ÆEl-one-sided N‚Ä≤ N‚Ä≤ t¬Æ = t¬Æ
  ¬ÆEl-one-sided U‚Ä≤ (U i‚â°1+j j‚â°j‚Ä≤) t¬Æ
    rewrite ‚â°-irrelevant i‚â°1+j refl = t¬Æ
  ¬ÆEl-one-sided (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ _ _) t¬Æ
    rewrite ‚â°-irrelevant i‚â°maxjk refl
          | ùïå-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
          | Glu-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl) = record
      { t‚à∂T  = t‚à∂T
      ; a‚ààEl = El-Œ†-ùïå i‚â°maxjk jA‚Ä≤ RT‚Ä≤ (El-one-sided (proj‚ÇÅ Œ†-bund) (Œ†-ùïå jA‚Ä≤ RT‚Ä≤ i‚â°maxjk) (proj‚ÇÇ Œ†-bund))
      ; IT   = IT
      ; OT   = OT
      ; ‚ä¢IT  = ‚ä¢IT
      ; ‚ä¢OT  = ‚ä¢OT
      ; T‚âà   = T‚âà
      ; krip = Œª ‚ä¢œÉ ‚Üí
        let open ŒõRel (krip ‚ä¢œÉ)
        in record
          { IT-rel = ¬Æ-one-sided jA jA‚Ä≤ IT-rel
          ; ap-rel = Œª s¬Æ b‚àà ‚Üí ap-helper b‚àà s¬Æ ap-rel
          }
      }
      where open GluŒõ t¬Æ
            Œ†-bund = Œ†-bundle jA (Œª a‚âàa‚Ä≤ ‚Üí RT a‚âàa‚Ä≤ , a‚ààEl a‚âàa‚Ä≤) refl
            ap-helper : (b‚àà‚Ä≤ : b ‚àà‚Ä≤ El j jA‚Ä≤) ‚Üí
                          Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] b ‚ààEl jA‚Ä≤ ‚Üí
                          (‚àÄ {s b} ‚Üí Œî ‚ä¢ s ‚à∂ IT [ œÉ ] ¬Æ[ j ] b ‚ààEl jA ‚Üí
                            (a‚àà : b ‚àà‚Ä≤ El j jA) ‚Üí
                            ŒõKripke Œî (t [ œÉ ] $ s) (OT [ œÉ , s ‚à∂ IT ‚Üô j ]) a b (_‚ä¢_‚à∂_¬Æ[ k ]_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ) ‚Üí
                          --------------------------------------------------------------
                          ŒõKripke Œî (t [ œÉ ] $ s) (OT [ œÉ , s ‚à∂ IT ‚Üô j ]) a b (_‚ä¢_‚à∂_¬Æ[ k ]_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ b‚àà‚Ä≤))
            ap-helper b‚àà‚Ä≤ s¬Æ ap-rel
              with El-one-sided jA‚Ä≤ jA b‚àà‚Ä≤
            ...  | b‚àà
                with RT b‚àà | RT‚Ä≤ b‚àà‚Ä≤ | ap-rel (¬ÆEl-one-sided jA‚Ä≤ jA s¬Æ) b‚àà
            ...    | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
                   | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß‚Ä≤ ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤‚ÇÅ }
                   | R
                  rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß‚Ä≤ ‚Üò‚ü¶T‚üß = record
                    { fa  = fa
                    ; ‚Üòfa = ‚Üòfa
                    ; ¬Æfa = ¬ÆEl-one-sided T‚âàT‚Ä≤ T‚âàT‚Ä≤‚ÇÅ ¬Æfa
                    }
                    where open ŒõKripke R
  ¬ÆEl-one-sided (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ _ _) t¬Æ
    rewrite ‚â°-irrelevant i‚â°j+k refl
          | ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
          | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
      { t‚à∂T  = t‚à∂T
      ; UT   = UT
      ; ‚ä¢UT  = ‚ä¢UT
      ; a‚ààEl = El-L-ùïå kA‚Ä≤ i‚â°j+k (El-one-sided (proj‚ÇÅ L-bund) (L-ùïå kA‚Ä≤ i‚â°j+k) (proj‚ÇÇ L-bund))
      ; T‚âà   = T‚âà
      ; krip = Œª ‚ä¢œÉ ‚Üí
        let open lKripke (krip ‚ä¢œÉ)
        in record
        { ua  = ua
        ; ‚Üòua = ‚Üòua
        ; ¬Æua = ¬ÆEl-one-sided kA kA‚Ä≤ ¬Æua
        }
      }
      where open Glul t¬Æ
            L-bund = L-bundle {j = j} kA a‚ààEl refl

-- The gluing model for types respect PER equivalence.
¬Æ-transport : ‚àÄ {i} (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i)
              (B‚âàB‚Ä≤ : B ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí
              A ‚âà B ‚àà ùïå i ‚Üí
              Œì ‚ä¢ T ¬Æ[ i ] A‚âàA‚Ä≤ ‚Üí
              ----------------------------
              Œì ‚ä¢ T ¬Æ[ i ] B‚âàB‚Ä≤
¬Æ-transport A‚âàA‚Ä≤ B‚âàB‚Ä≤ A‚âàB t‚àºa = ¬Æ-one-sided B‚âàA B‚âàB‚Ä≤ (¬Æ-swap A‚âàB B‚âàA (¬Æ-one-sided A‚âàA‚Ä≤ A‚âàB t‚àºa))
  where B‚âàA = ùïå-sym A‚âàB

-- The gluing model for terms respect PER equivalence.
¬ÆEl-transport : ‚àÄ {i} (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i)
                 (B‚âàB‚Ä≤ : B ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí
                 A ‚âà B ‚àà ùïå i ‚Üí
                 Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàA‚Ä≤ ‚Üí
                 ----------------------------
                 Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl B‚âàB‚Ä≤
¬ÆEl-transport A‚âàA‚Ä≤ B‚âàB‚Ä≤ A‚âàB t‚àºa = ¬ÆEl-one-sided B‚âàA B‚âàB‚Ä≤ (¬ÆEl-swap A‚âàB B‚âàA (¬ÆEl-one-sided A‚âàA‚Ä≤ A‚âàB t‚àºa))
  where B‚âàA = ùïå-sym A‚âàB

¬Æ-‚â° : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) (A‚Ä≤‚âàB‚Ä≤ : A‚Ä≤ ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí Œì ‚ä¢ T ¬Æ[ i ] A‚âàB ‚Üí A ‚â° A‚Ä≤ ‚Üí Œì ‚ä¢ T ¬Æ[ i ] A‚Ä≤‚âàB‚Ä≤
¬Æ-‚â° A‚âàB A‚Ä≤‚âàB‚Ä≤ T‚àºA refl = ¬Æ-one-sided A‚âàB A‚Ä≤‚âàB‚Ä≤ T‚àºA

¬ÆEl-‚â° : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) (A‚Ä≤‚âàB‚Ä≤ : A‚Ä≤ ‚âà B‚Ä≤ ‚àà ùïå i) ‚Üí Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí A ‚â° A‚Ä≤ ‚Üí Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚Ä≤‚âàB‚Ä≤
¬ÆEl-‚â° A‚âàB A‚Ä≤‚âàB‚Ä≤ t‚àºa refl = ¬ÆEl-one-sided A‚âàB A‚Ä≤‚âàB‚Ä≤ t‚àºa

-- The gluing models for types and terms are monotonic.
¬Æ-mon : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
        (A‚âàB‚Ä≤ : A ‚âà B ‚àà ùïå i) ‚Üí
        Œì ‚ä¢ T ¬Æ[ i ] A‚âàB ‚Üí
        Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
        -----------------------------------
        Œî ‚ä¢ T [ œÉ ] ¬Æ[ i ] A‚âàB‚Ä≤
¬Æ-mon {_} {_} {_} {T} {Œî} {œÉ} {i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚âà‚Ä≤C‚Ä≤ _ _) (‚ä¢T , rel) ‚ä¢œÉ = (t[œÉ]-Se ‚ä¢T (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)) , helper
  where helper : Œî‚Ä≤ ‚ä¢w œÑ ‚à∂ Œî ‚Üí Œî‚Ä≤ ‚ä¢ T [ œÉ ] [ œÑ ] ‚âà Ne‚áíExp (proj‚ÇÅ (C‚âà‚Ä≤C‚Ä≤ (L.length Œî‚Ä≤))) ‚à∂[ 1 + i ] Se i
        helper {Œî‚Ä≤} ‚ä¢œÑ
          with C‚âàC‚Ä≤ (len Œî‚Ä≤) | C‚âà‚Ä≤C‚Ä≤ (len Œî‚Ä≤) | (rel (‚ä¢w-‚àò ‚ä¢œÉ ‚ä¢œÑ))
        ...  | u , ‚Üòu , _ | u‚Ä≤ , ‚Üòu‚Ä≤ , _ | TœÉœÑ‚âà
            rewrite Re-det ‚Üòu ‚Üòu‚Ä≤ = ‚âà-trans ([‚àò]-Se ‚ä¢T (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ) (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ)) TœÉœÑ‚âà
¬Æ-mon N‚Ä≤ N‚Ä≤ T¬Æ ‚ä¢œÉ = ‚âà-trans ([]-cong-Se‚Ä≤ T¬Æ (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)) (N-[] (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))
¬Æ-mon U‚Ä≤ (U _ _) T¬Æ ‚ä¢œÉ = ‚âà-trans ([]-cong-Se‚Ä≤ T¬Æ (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)) (Se-[] _ (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))
¬Æ-mon {Œî = Œî} {œÉ = œÉ} (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ _ _) T¬Æ ‚ä¢œÉ
  rewrite ‚â°-irrelevant i‚â°maxjk refl
        | ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
        | ùïå-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
        | Glu-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl) = record
    { IT   = IT [ œÉ ]
    ; OT   = OT [ q (IT ‚Üô j) œÉ ]
    ; ‚ä¢IT  = t[œÉ]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤
    ; ‚ä¢OT  = t[œÉ]-Se ‚ä¢OT (‚ä¢q (proj‚ÇÅ (presup-s ‚ä¢œÉ‚Ä≤)) ‚ä¢œÉ‚Ä≤ ‚ä¢IT)
    ; T‚âà   = ‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉ‚Ä≤) (Œ†-[] ‚ä¢œÉ‚Ä≤ ‚ä¢IT ‚ä¢OT refl)
    ; krip = Œª {_} {œÑ} ‚ä¢œÑ ‚Üí
      let open Œ†Rel (krip (‚ä¢w-‚àò ‚ä¢œÉ ‚ä¢œÑ)) in record
        { IT-rel = ¬Æ-one-sided jA jA‚Ä≤ (¬Æ-resp-‚âà jA IT-rel (‚âà-sym ([‚àò]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤ (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ))))
        ; OT-rel = Œª s¬Æ a‚àà ‚Üí OT-helper ‚ä¢œÑ a‚àà s¬Æ OT-rel
        }
    }
    where
      open GluŒ† T¬Æ
      ‚ä¢œÉ‚Ä≤ = ‚ä¢w‚áí‚ä¢s ‚ä¢œÉ
      OT-helper : Œî‚Ä≤ ‚ä¢w œÑ ‚à∂ Œî ‚Üí
                  (a‚àà‚Ä≤ : a ‚àà‚Ä≤ El j jA‚Ä≤) ‚Üí
                  Œî‚Ä≤ ‚ä¢ s ‚à∂ IT [ œÉ ] [ œÑ ] ¬Æ[ j ] a ‚ààEl jA‚Ä≤ ‚Üí
                  (‚àÄ {s a} ‚Üí Œî‚Ä≤ ‚ä¢ s ‚à∂ IT [ œÉ ‚àò œÑ ] ¬Æ[ j ] a ‚ààEl jA ‚Üí
                    (a‚àà : a ‚àà‚Ä≤ El j jA) ‚Üí
                    Œî‚Ä≤ ‚ä¢ OT [ (œÉ ‚àò œÑ) , s ‚à∂ IT ‚Üô j ] ¬Æ[ k ] Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ‚Üí
                  --------------------------------------------------------------
                  Œî‚Ä≤ ‚ä¢ OT [ q (IT ‚Üô j) œÉ ] [ œÑ , s ‚à∂ IT [ œÉ ] ‚Üô j ] ¬Æ[ k ] Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ a‚àà‚Ä≤)
      OT-helper ‚ä¢œÑ a‚àà‚Ä≤ s¬Æ‚Ä≤ OT-rel
        with ¬ÆEl-resp-T‚âà jA (¬ÆEl-one-sided jA‚Ä≤ jA s¬Æ‚Ä≤) ([‚àò]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤ (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ))
           | El-one-sided jA‚Ä≤ jA a‚àà‚Ä≤
      ...  | s¬Æ | a‚àà
          with RT a‚àà | RT‚Ä≤ a‚àà‚Ä≤ | OT-rel s¬Æ a‚àà
      ...    | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
             | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß‚Ä≤ ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤‚ÇÅ }
             | rel
            rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß‚Ä≤ ‚Üò‚ü¶T‚üß = ¬Æ-resp-‚âà T‚âàT‚Ä≤‚ÇÅ (¬Æ-‚â° T‚âàT‚Ä≤ T‚âàT‚Ä≤‚ÇÅ rel refl) ([]-q-‚àò-, ‚ä¢OT ‚ä¢œÉ‚Ä≤ (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ) (¬ÆEl‚áítm jA‚Ä≤ s¬Æ‚Ä≤))
¬Æ-mon {Œî = Œî} {œÉ = œÉ} (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ _ _) T¬Æ ‚ä¢œÉ
  rewrite ‚â°-irrelevant i‚â°j+k refl
        | ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
    { UT   = UT [ œÉ ]
    ; ‚ä¢UT  = t[œÉ]-Se ‚ä¢UT (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)
    ; T‚âà   = ‚âà-trans ([]-cong-Se‚Ä≤ T‚âà (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)) (Liftt-[] _ (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ) ‚ä¢UT)
    ; krip = helper
    }
  where open GluL T¬Æ
        helper : Œî‚Ä≤ ‚ä¢w œÑ ‚à∂ Œî ‚Üí Œî‚Ä≤ ‚ä¢ UT [ œÉ ] [ œÑ ] ¬Æ[ k ] kA‚Ä≤
        helper {Œî‚Ä≤} ‚ä¢œÑ = ¬Æ-‚â° kA kA‚Ä≤ (¬Æ-resp-‚âà kA (krip (‚ä¢w-‚àò ‚ä¢œÉ ‚ä¢œÑ)) (‚âà-sym ([‚àò]-Se ‚ä¢UT (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ) (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ)))) refl

¬ÆEl-mon : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i)
          (A‚âàB‚Ä≤ : A ‚âà B ‚àà ùïå i) ‚Üí
          Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
          Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
          --------------------------------------
          Œî ‚ä¢ t [ œÉ ] ‚à∂ T [ œÉ ] ¬Æ[ i ] a ‚ààEl A‚âàB‚Ä≤
¬ÆEl-mon {t = t} {T = T} {Œî = Œî} {œÉ = œÉ} {i = i} (ne‚Ä≤ C‚âàC‚Ä≤) (ne C‚âà‚Ä≤C‚Ä≤ _ _) (ne c‚âàc refl _ , glu) ‚ä¢œÉ = (ne‚Ä≤ c‚âàc) , record
  { t‚à∂T  = t[œÉ] t‚à∂T ‚ä¢œÉ‚Ä≤
  ; ‚ä¢T   = t[œÉ]-Se ‚ä¢T ‚ä¢œÉ‚Ä≤
  ; krip = helper
  }
  where open GluNe glu
        ‚ä¢œÉ‚Ä≤ = ‚ä¢w‚áí‚ä¢s ‚ä¢œÉ

        helper : ‚àÄ {Œî‚Ä≤ œÑ} ‚Üí Œî‚Ä≤ ‚ä¢w œÑ ‚à∂ Œî ‚Üí
                 -------------------------------------------------
                 Œî‚Ä≤ ‚ä¢ T [ œÉ ] [ œÑ ] ‚âà Ne‚áíExp (proj‚ÇÅ (C‚âà‚Ä≤C‚Ä≤ (len Œî‚Ä≤))) ‚à∂[ 1 + i ] Se i
                  √ó Œî‚Ä≤ ‚ä¢ t [ œÉ ] [ œÑ ] ‚âà Ne‚áíExp (proj‚ÇÅ (c‚âàc (len Œî‚Ä≤))) ‚à∂[ i ] T [ œÉ ] [ œÑ ]
        helper {Œî‚Ä≤ = Œî‚Ä≤} {œÑ = œÑ} ‚ä¢œÑ
          with C‚âàC‚Ä≤ (len Œî‚Ä≤) | C‚âà‚Ä≤C‚Ä≤ (len Œî‚Ä≤) | c‚âàc (len Œî‚Ä≤) | krip (‚ä¢w-‚àò ‚ä¢œÉ ‚ä¢œÑ)
        ...  | V , ‚ÜòV , _
             | V‚Ä≤ , ‚ÜòV‚Ä≤ , _
             | u , ‚Üòu , _
             | TœÉœÑ‚âà , tœÉœÑ‚âà
            rewrite Re-det ‚ÜòV ‚ÜòV‚Ä≤ = (‚âà-trans ([‚àò]-Se ‚ä¢T ‚ä¢œÉ‚Ä≤ ‚ä¢œÑ‚Ä≤) TœÉœÑ‚âà) , ‚âà-conv (‚âà-trans (‚âà-sym ([‚àò] ‚ä¢œÑ‚Ä≤ ‚ä¢œÉ‚Ä≤ t‚à∂T)) tœÉœÑ‚âà) (‚âà-sym ([‚àò]-Se ‚ä¢T ‚ä¢œÉ‚Ä≤ ‚ä¢œÑ‚Ä≤))
            where ‚ä¢œÑ‚Ä≤ = ‚ä¢w‚áí‚ä¢s ‚ä¢œÑ
¬ÆEl-mon N‚Ä≤ N‚Ä≤ (t¬ÆNat , T‚âàN) ‚ä¢œÉ = ¬ÆNat-mon t¬ÆNat ‚ä¢œÉ , ‚âà-trans ([]-cong-Se‚Ä≤ T‚âàN (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)) (N-[] (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ))
¬ÆEl-mon (U‚Ä≤ {j}) (U i‚â°1+j j‚â°j‚Ä≤) t¬Æ ‚ä¢œÉ
  rewrite ‚â°-irrelevant i‚â°1+j refl
        | ùïå-wf-gen j (U‚â§ refl)
        | Glu-wf-gen {j} j U‚â§‚Ä≤ = record
    { t‚à∂T = t[œÉ] t‚à∂T (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)
    ; T‚âà  = ‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉ‚Ä≤) (Se-[] _ ‚ä¢œÉ‚Ä≤)
    ; A‚ààùïå = A‚ààùïå
    ; rel = ¬Æ-mon A‚ààùïå A‚ààùïå rel ‚ä¢œÉ
    }
    where open GluU t¬Æ
          ‚ä¢œÉ‚Ä≤ = ‚ä¢w‚áí‚ä¢s ‚ä¢œÉ
¬ÆEl-mon {Œì = Œì} {t = t} {T = T} {Œî = Œî} {œÉ = œÉ} (Œ†‚Ä≤ {j} {k} jA RT) (Œ† i‚â°maxjk jA‚Ä≤ RT‚Ä≤ _ _) t¬Æ ‚ä¢œÉ
  rewrite ‚â°-irrelevant i‚â°maxjk refl
        | ùïå-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
        | ùïå-wf-gen k (Œ†O‚â§‚Ä≤ j k refl)
        | Glu-wf-gen j (Œ†I‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Œ†O‚â§‚Ä≤ j k refl) = record
    { t‚à∂T  = t[œÉ] t‚à∂T ‚ä¢œÉ‚Ä≤
    ; a‚ààEl = El-Œ†-ùïå i‚â°maxjk jA‚Ä≤ RT‚Ä≤ (El-one-sided (proj‚ÇÅ Œ†-bund) (Œ†-ùïå jA‚Ä≤ RT‚Ä≤ i‚â°maxjk) (proj‚ÇÇ Œ†-bund))
    ; IT   = IT [ œÉ ]
    ; OT   = OT [ q (IT ‚Üô j) œÉ ]
    ; ‚ä¢IT  = t[œÉ]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤
    ; ‚ä¢OT  = t[œÉ]-Se ‚ä¢OT (‚ä¢q (proj‚ÇÅ (presup-s ‚ä¢œÉ‚Ä≤)) ‚ä¢œÉ‚Ä≤ ‚ä¢IT)
    ; T‚âà   = ‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉ‚Ä≤) (Œ†-[] ‚ä¢œÉ‚Ä≤ ‚ä¢IT ‚ä¢OT refl)
    ; krip = Œª {Œî‚Ä≤} {œÑ} ‚ä¢œÑ ‚Üí
      let open ŒõRel (krip (‚ä¢w-‚àò ‚ä¢œÉ ‚ä¢œÑ))
      in record
      { IT-rel = ¬Æ-one-sided jA jA‚Ä≤ (¬Æ-resp-‚âà jA IT-rel (‚âà-sym ([‚àò]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤ (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ))))
      ; ap-rel = Œª s¬Æ b‚àà ‚Üí ap-helper ‚ä¢œÑ b‚àà s¬Æ ap-rel
      }
    }
    where open GluŒõ t¬Æ
          Œ†-bund = Œ†-bundle jA (Œª a‚âàa‚Ä≤ ‚Üí RT a‚âàa‚Ä≤ , a‚ààEl a‚âàa‚Ä≤) refl
          ‚ä¢œÉ‚Ä≤ = ‚ä¢w‚áí‚ä¢s ‚ä¢œÉ
          ap-helper : Œî‚Ä≤ ‚ä¢w œÑ ‚à∂ Œî ‚Üí
                      (b‚àà‚Ä≤ : b ‚àà‚Ä≤ El j jA‚Ä≤) ‚Üí
                      Œî‚Ä≤ ‚ä¢ s ‚à∂ IT [ œÉ ] [ œÑ ] ¬Æ[ j ] b ‚ààEl jA‚Ä≤ ‚Üí
                      (‚àÄ {s b} ‚Üí Œî‚Ä≤ ‚ä¢ s ‚à∂ IT [ œÉ ‚àò œÑ ] ¬Æ[ j ] b ‚ààEl jA ‚Üí
                        (a‚àà : b ‚àà‚Ä≤ PERDef.El j _ jA) ‚Üí
                        ŒõKripke Œî‚Ä≤ (t [ œÉ ‚àò œÑ ] $ s) (OT [ (œÉ ‚àò œÑ) , s ‚à∂ IT ‚Üô j ]) a b (_‚ä¢_‚à∂_¬Æ[ k ]_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ) ‚Üí
                      --------------------------------------------------------------
                      ŒõKripke Œî‚Ä≤ (t [ œÉ ] [ œÑ ] $ s) (OT [ q (IT ‚Üô j) œÉ ] [ œÑ , s ‚à∂ IT [ œÉ ] ‚Üô j ]) a b (_‚ä¢_‚à∂_¬Æ[ k ]_‚ààEl Œ†RT.T‚âàT‚Ä≤ (RT‚Ä≤ b‚àà‚Ä≤))
          ap-helper {Œî‚Ä≤ = Œî‚Ä≤} {œÑ = œÑ} {s = s} ‚ä¢œÑ b‚àà‚Ä≤ s¬Æ‚Ä≤ ap-rel
            with El-one-sided jA‚Ä≤ jA b‚àà‚Ä≤
          ...  | b‚àà
              with ¬ÆEl-one-sided jA‚Ä≤ jA (¬ÆEl-resp-T‚âà jA‚Ä≤ s¬Æ‚Ä≤ ([‚àò]-Se ‚ä¢IT ‚ä¢œÉ‚Ä≤ (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ)))
          ...    | s¬Æ
                with RT b‚àà | RT‚Ä≤ b‚àà‚Ä≤ | (ap-rel s¬Æ b‚àà)
          ...      | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
                  | record { ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß‚Ä≤ ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤‚ÇÅ }
                  | record { fa = fa ; ‚Üòfa = ‚Üòfa ; ¬Æfa = ¬Æfa }
                  rewrite ‚ü¶‚üß-det ‚Üò‚ü¶T‚üß‚Ä≤ ‚Üò‚ü¶T‚üß = record
                    { fa = fa
                    ; ‚Üòfa = ‚Üòfa
                    ; ¬Æfa = ¬ÆEl-one-sided T‚âàT‚Ä≤ T‚âàT‚Ä≤‚ÇÅ (¬ÆEl-resp-‚âà T‚âàT‚Ä≤ (¬ÆEl-resp-T‚âà T‚âàT‚Ä≤ ¬Æfa OT,‚âà) t[œÉœÑ]s‚âàt[œÉ][œÑ]s)
                    }
            where ‚ä¢œÑ‚Ä≤  = ‚ä¢w‚áí‚ä¢s ‚ä¢œÑ
                  ‚ä¢s   = ¬ÆEl‚áítm jA‚Ä≤ s¬Æ‚Ä≤
                  ‚ä¢s‚Ä≤  = ¬ÆEl‚áítm jA s¬Æ
                  ‚ä¢œÉœÑ  = s-‚àò ‚ä¢œÑ‚Ä≤ ‚ä¢œÉ‚Ä≤
                  OT,‚âà = []-q-‚àò-, ‚ä¢OT ‚ä¢œÉ‚Ä≤ ‚ä¢œÑ‚Ä≤ ‚ä¢s
                  t[œÉœÑ]s‚âàt[œÉ][œÑ]s : Œî‚Ä≤ ‚ä¢ t [ œÉ ‚àò œÑ ] $ s ‚âà t [ œÉ ] [ œÑ ] $ s ‚à∂[ k ] OT [ q (IT ‚Üô j) œÉ ] [ œÑ , s ‚à∂ sub IT œÉ ‚Üô j ]
                  t[œÉœÑ]s‚âàt[œÉ][œÑ]s = ‚âà-conv ($-cong (t[œÉ]-Se ‚ä¢IT ‚ä¢œÉœÑ) (t[œÉ]-Se ‚ä¢OT (‚ä¢q (proj‚ÇÅ (presup-s ‚ä¢œÑ‚Ä≤)) ‚ä¢œÉœÑ ‚ä¢IT))
                                                  (‚âà-conv ([‚àò] ‚ä¢œÑ‚Ä≤ ‚ä¢œÉ‚Ä≤ t‚à∂T) (‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉœÑ) (Œ†-[] ‚ä¢œÉœÑ ‚ä¢IT ‚ä¢OT refl)))
                                                  (‚âà-refl ‚ä¢s‚Ä≤) refl)
                                         (‚âà-trans (‚âà-sym ([]-q-‚àò-,‚Ä≤ ‚ä¢OT ‚ä¢œÉœÑ ‚ä¢s‚Ä≤)) OT,‚âà)
¬ÆEl-mon {Œì = Œì} {t = t} {T = T} {Œî = Œî} {œÉ = œÉ} {i = i} (L‚Ä≤ {j} {k} kA) (L i‚â°j+k kA‚Ä≤ _ _) t¬Æ ‚ä¢œÉ
  rewrite ‚â°-irrelevant i‚â°j+k refl
        | ùïå-wf-gen k (Li‚â§‚Ä≤ j k refl)
        | Glu-wf-gen k (Li‚â§‚Ä≤ j k refl) = record
    { t‚à∂T  = t[œÉ] t‚à∂T (‚ä¢w‚áí‚ä¢s ‚ä¢œÉ)
    ; UT   = UT [ œÉ ]
    ; ‚ä¢UT  = t[œÉ]-Se ‚ä¢UT ‚ä¢œÉ‚Ä≤
    ; a‚ààEl = El-L-ùïå kA‚Ä≤ i‚â°j+k (El-one-sided (proj‚ÇÅ L-bund) (L-ùïå kA‚Ä≤ i‚â°j+k) (proj‚ÇÇ L-bund))
    ; T‚âà   = ‚âà-trans ([]-cong-Se‚Ä≤ T‚âà ‚ä¢œÉ‚Ä≤) (Liftt-[] _ ‚ä¢œÉ‚Ä≤ ‚ä¢UT)
    ; krip = Œª {Œî‚Ä≤} {œÑ} ‚ä¢œÑ ‚Üí
      let open lKripke (krip (‚ä¢w-‚àò ‚ä¢œÉ ‚ä¢œÑ))
      in record
        { ua  = ua
        ; ‚Üòua = ‚Üòua
        ; ¬Æua = helper (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ) ¬Æua (unli[œÑ‚àòœÉ]‚âàunli[œÉ][œÑ] (‚ä¢w‚áí‚ä¢s ‚ä¢œÑ))
        }
    }
    where open Glul t¬Æ
          L-bund = L-bundle {j = j} kA a‚ààEl refl
          ‚ä¢œÉ‚Ä≤ = ‚ä¢w‚áí‚ä¢s ‚ä¢œÉ
          unli[œÑ‚àòœÉ]‚âàunli[œÉ][œÑ] : Œî‚Ä≤ ‚ä¢s œÑ ‚à∂ Œî ‚Üí
                                 Œî‚Ä≤ ‚ä¢ (unlift t) [ œÉ ‚àò œÑ ] ‚âà (unlift (t [ œÉ ])) [ œÑ ] ‚à∂[ k ] UT [ œÉ ] [ œÑ ]
          unli[œÑ‚àòœÉ]‚âàunli[œÉ][œÑ] ‚ä¢œÑ‚Ä≤ = ‚âà-trans (‚âà-conv ([‚àò] ‚ä¢œÑ‚Ä≤ ‚ä¢œÉ‚Ä≤ (L-E _ ‚ä¢UT (conv t‚à∂T T‚âà)))
                                                     (‚âà-sym ([‚àò]-Se ‚ä¢UT ‚ä¢œÉ‚Ä≤ ‚ä¢œÑ‚Ä≤)))
                                             ([]-cong (unlift-[] _ ‚ä¢UT ‚ä¢œÉ‚Ä≤ (conv t‚à∂T T‚âà)) (s-‚âà-refl ‚ä¢œÑ‚Ä≤))
          helper :  ‚àÄ {ua} ‚Üí
                    Œî‚Ä≤ ‚ä¢s œÑ ‚à∂ Œî ‚Üí
                    Œî‚Ä≤ ‚ä¢ (unlift t) [ œÉ ‚àò œÑ ] ‚à∂ UT [ œÉ ‚àò œÑ ] ¬Æ[ k ] ua ‚ààEl kA ‚Üí
                    Œî‚Ä≤ ‚ä¢ (unlift t) [ œÉ ‚àò œÑ ] ‚âà (unlift (t [ œÉ ])) [ œÑ ] ‚à∂[ k ] UT [ œÉ ] [ œÑ ] ‚Üí
                    ------------------------------------
                    Œî‚Ä≤ ‚ä¢ (unlift (t [ œÉ ])) [ œÑ ] ‚à∂ UT [ œÉ ] [ œÑ ] ¬Æ[ k ] ua ‚ààEl kA‚Ä≤
          helper ‚ä¢œÑ‚Ä≤ ¬Æa t‚âàt‚Ä≤ = ¬ÆEl-one-sided kA kA‚Ä≤ (¬ÆEl-resp-‚âà kA (¬ÆEl-resp-T‚âà kA ¬Æa (‚âà-sym ([‚àò]-Se ‚ä¢UT ‚ä¢œÉ‚Ä≤ ‚ä¢œÑ‚Ä≤))) t‚âàt‚Ä≤)

¬Æ-mon‚Ä≤ : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
         Œì ‚ä¢ T ¬Æ[ i ] A‚âàB ‚Üí
         Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
         -----------------------------------
         Œî ‚ä¢ T [ œÉ ] ¬Æ[ i ] A‚âàB
¬Æ-mon‚Ä≤ A‚âàB = ¬Æ-mon A‚âàB A‚âàB

¬ÆEl-mon‚Ä≤ : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
           Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
           Œî ‚ä¢w œÉ ‚à∂ Œì ‚Üí
           --------------------------------------
           Œî ‚ä¢ t [ œÉ ] ‚à∂ T [ œÉ ] ¬Æ[ i ] a ‚ààEl A‚âàB
¬ÆEl-mon‚Ä≤ A‚âàB = ¬ÆEl-mon A‚âàB A‚âàB