{-# OPTIONS --without-K --safe #-}

open import Level hiding (_‚äî_)
open import Axiom.Extensionality.Propositional

-- Properties of the gluing models for terms and types
module NonCumulative.Soundness.Properties.LogRel (fext : ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí Extensionality ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ) where

open import Lib
open import Data.Nat
open import Data.Nat.Properties as ‚Ñï‚Çö

open import NonCumulative.Statics.Ascribed.Misc
open import NonCumulative.Statics.Ascribed.Presup
open import NonCumulative.Statics.Ascribed.Properties
open import NonCumulative.Semantics.Readback
open import NonCumulative.Semantics.Properties.PER (fext)
open import NonCumulative.Soundness.LogRel

open import NonCumulative.Soundness.Properties.NoFunExt.LogRel public

Glu-wellfounded-‚â°‚Ä≤ : ‚àÄ {j i i‚Ä≤} ‚Üí (j<i : j < i) ‚Üí (j<i‚Ä≤ : j < i‚Ä≤) ‚Üí
  (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i j<i univ {A} {B}) ‚â° (Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) {A B} ‚Üí Glu-wellfounded i‚Ä≤ j<i‚Ä≤ univ {A} {B})
Glu-wellfounded-‚â°‚Ä≤ {j} {i} {i‚Ä≤} (s‚â§s {j} j<i) (s‚â§s {j} j<i‚Ä≤) = fext Œª (univ : ‚àÄ {l} ‚Üí l < j ‚Üí Ty) ‚Üí cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí
    Glu.‚ü¶ j , rc , univ ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) (‚â§-trans j‚Ä≤<j j<i‚Ä≤))

Glu-wellfounded-‚â° : ‚àÄ {i j} (j<i : j < i) ‚Üí  (Œª {A B} ‚Üí Glu-wellfounded i {j} j<i (ùïå-wellfounded j) {A} {B}) ‚â° (_‚ä¢_¬Æ[ j ]_)
Glu-wellfounded-‚â° {j = j} (s‚â§s j<i) = cong
  (Œª (rc : ‚àÄ {k} (k<i : k < j) (univ : ‚àÄ {l} ‚Üí l < k ‚Üí Ty) {A B} ‚Üí Ctx ‚Üí Typ ‚Üí A ‚âà B ‚àà PERDef.ùïå k univ ‚Üí Set) {A B} ‚Üí Glu.‚ü¶ j , rc , ùïå-wellfounded j ‚üß_‚ä¢_¬Æ_)
  (implicit-extensionality fext Œª {j‚Ä≤} ‚Üí fext Œª j‚Ä≤<j ‚Üí Glu-wellfounded-‚â°‚Ä≤ (‚â§-trans j‚Ä≤<j j<i) j‚Ä≤<j)

 -- If t and a are related, then a is in the El PER model.
¬ÆEl‚áí‚ààEl : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
          Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
          -----------------------------
          a ‚àà‚Ä≤ El i A‚âàB
¬ÆEl‚áí‚ààEl (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°‚Ä≤i , snd) = ne c‚âàc j‚â°i j‚â°‚Ä≤i
¬ÆEl‚áí‚ààEl N‚Ä≤ (t¬ÆNat , T‚âàN) = ¬ÆNat‚áí‚ààNat t¬ÆNat
¬ÆEl‚áí‚ààEl {a = a} {i = i} (U {j} {j‚Ä≤ = _} i‚â°1+j j‚â°j‚Ä≤) record { t‚à∂T = t‚à∂T ; T‚âà = T‚âà ; A‚ààùïå = A‚ààùïå ; rel = rel }
  rewrite ùïå-wellfounded-‚â°-ùïå (1 + j) (‚â§-reflexive refl) | ùïå-wf-simpl i | sym (ùïå-wf-simpl j) = A‚ààùïå
¬ÆEl‚áí‚ààEl (Œ† eq jA RT j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open GluŒõ t¬Æ
¬ÆEl‚áí‚ààEl (L eq A‚âàA‚Ä≤ j‚â°j' k‚â°k‚Ä≤) t¬Æ = a‚ààEl
  where open Glul t¬Æ

Glu-wellfounded-‚â°-Glul : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (j + k) {l} (Li‚â§ refl l<k)) ‚â° Glu-wellfounded k
Glu-wellfounded-‚â°-Glul {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Li‚â§ {j + k} refl l<k) l<k))

Glu-wellfounded-‚â°-GluŒõ : ‚àÄ {j k} ‚Üí
  (Œª {l} l<k ‚Üí Glu-wellfounded (max j k) {l} (Œ†O‚â§ refl l<k)) ‚â° Glu-wellfounded k
Glu-wellfounded-‚â°-GluŒõ {j} {k} = implicit-extensionality fext (fext (Œª l<k ‚Üí Glu-wellfounded-‚â°‚Ä≤ (Œ†O‚â§ {max j k} refl l<k) l<k))


¬ÆEl‚áí¬Æ : ‚àÄ { i } ‚Üí (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
        Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
        ----------------------------
        Œì ‚ä¢ T ¬Æ[ i ] A‚âàB
¬ÆEl‚áí¬Æ (ne C‚âàC j‚â°1+i j‚Ä≤‚â°1+i) (ne c‚âàc j‚â°i j‚â°√≠ , record { t‚à∂T = t‚à∂T ; ‚ä¢T = ‚ä¢T ; krip = krip }) = ‚ä¢T , Œª ‚ä¢œÉ ‚Üí proj‚ÇÅ (krip ‚ä¢œÉ)
¬ÆEl‚áí¬Æ N‚Ä≤ (_ , T‚âàN) = T‚âàN
¬ÆEl‚áí¬Æ (U _ _) t¬Æ = GluU.T‚âà t¬Æ
¬ÆEl‚áí¬Æ (Œ† {j = j} {k = k} refl jA RT refl refl) record { t‚à∂T = t‚à∂T ; a‚ààEl = a‚ààEl ; IT = IT ; OT = OT ; ‚ä¢IT = ‚ä¢IT ; ‚ä¢OT = ‚ä¢OT ; T‚âà = T‚âà ; krip = krip }
  rewrite ùïå-wf-gen {max j k} k (Œª l<k ‚Üí Œ†O‚â§ refl l<k) | Glu-wellfounded-‚â°-GluŒõ {j} {k} = record
  { IT = IT
  ; OT = OT
  ; ‚ä¢IT = ‚ä¢IT
  ; ‚ä¢OT = ‚ä¢OT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open ŒõRel (krip ‚ä¢œÉ) in record
      { IT-rel = IT-rel
      ; OT-rel = Œª s¬Æ a‚àà ‚Üí let open ŒõKripke (ap-rel s¬Æ a‚àà) in ¬ÆEl‚áí¬Æ (Œ†RT.T‚âàT‚Ä≤ (RT a‚àà)) ¬Æfa
      }
  }
¬ÆEl‚áí¬Æ (L‚Ä≤ {j} {k} kA) record { t‚à∂T = t‚à∂T ; UT = UT ; ‚ä¢UT = ‚ä¢UT ; a‚ààEl = a‚ààEl ; T‚âà = T‚âà ; krip = krip }
  rewrite ùïå-wf-gen {j + k} k (Œª l<k ‚Üí Li‚â§ refl l<k) | Glu-wellfounded-‚â°-Glul {j} {k} = record
  { UT = UT
  ; ‚ä¢UT = ‚ä¢UT
  ; T‚âà = T‚âà
  ; krip = Œª ‚ä¢œÉ ‚Üí let open lKripke (krip ‚ä¢œÉ) in ¬ÆEl‚áí¬Æ kA ¬Æua
  }

-- If t and a are related, then the type of t is well-formed.
¬ÆEl‚áíty : ‚àÄ {i} (A‚âàB : A ‚âà B ‚àà ùïå i) ‚Üí
           Œì ‚ä¢ t ‚à∂ T ¬Æ[ i ] a ‚ààEl A‚âàB ‚Üí
           ---------------------------
           Œì ‚ä¢ T ‚à∂[ 1 + i ] Se i
¬ÆEl‚áíty A‚âàB t‚àºa = ¬Æ‚áíty A‚âàB (¬ÆEl‚áí¬Æ A‚âàB t‚àºa)