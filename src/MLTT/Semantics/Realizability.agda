{-# OPTIONS --without-K --safe #-}

open import Level
open import Axiom.Extensionality.Propositional

-- Realizability of the PER model
--
-- Fundamentally, realizability states that if two values are related, then their
-- corresponding syntactic normal forms are equal. More precisely, realizability
-- states that the following subsumption relations:
--
--       Bot ‚äÜ El i A ‚äÜ Top
--             ùïå i    ‚äÜ TopT
--
-- Due to these subsumptions, we can always derive Top or TopT from El or ùïå and thus
-- obtain the equality we want.
module MLTT.Semantics.Realizability (fext : Extensionality 0‚Ñì (suc 0‚Ñì)) where

open import Data.Nat.Induction
open import Lib

open import MLTT.Semantics.Domain
open import MLTT.Semantics.Evaluation
open import MLTT.Semantics.PER
open import MLTT.Semantics.Properties.PER.Core fext
open import MLTT.Semantics.Readback


private
  module Real i (rec : ‚àÄ {j} ‚Üí j < i ‚Üí ‚àÄ {A A‚Ä≤} (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå j) ‚Üí A ‚âà A‚Ä≤ ‚àà TopT) where
    mutual

      Bot‚äÜEl : (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i) ‚Üí
               c ‚âà c‚Ä≤ ‚àà Bot ‚Üí
               ‚Üë A c ‚âà ‚Üë A‚Ä≤ c‚Ä≤ ‚àà El i A‚âàA‚Ä≤
      Bot‚äÜEl (ne C‚âàC‚Ä≤) c‚âàc‚Ä≤             = ne c‚âàc‚Ä≤
      Bot‚äÜEl N c‚âàc‚Ä≤                     = ne c‚âàc‚Ä≤
      Bot‚äÜEl (U‚Ä≤ j<i) c‚âàc‚Ä≤
        rewrite ùïå-wellfounded-‚â°-ùïå _ j<i = ne c‚âàc‚Ä≤
      Bot‚äÜEl {Œ† A _ _} {Œ† A‚Ä≤ _ _} {c} {c‚Ä≤} (Œ† iA RT) c‚âàc‚Ä≤ {b} {b‚Ä≤} b‚âàb‚Ä≤
        with RT b‚âàb‚Ä≤
      ...  | record
             { ‚ü¶T‚üß   = ‚ü¶T‚üß
             ; ‚ü¶T‚Ä≤‚üß  = ‚ü¶T‚Ä≤‚üß
             ; ‚Üò‚ü¶T‚üß  = ‚Üò‚ü¶T‚üß
             ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚Ä≤‚üß
             ; T‚âàT‚Ä≤  = T‚âàT‚Ä≤
             } = record
             { fa = [ ‚ü¶T‚üß ] c $‚Ä≤ ‚Üì A b
             ; fa‚Ä≤ = [ ‚ü¶T‚Ä≤‚üß ] c‚Ä≤ $‚Ä≤ ‚Üì A‚Ä≤ b‚Ä≤
             ; ‚Üòfa = $‚àô A c ‚Üò‚ü¶T‚üß
             ; ‚Üòfa‚Ä≤ = $‚àô A‚Ä≤ c‚Ä≤ ‚Üò‚ü¶T‚Ä≤‚üß
             ; fa‚âàfa‚Ä≤ = Bot‚äÜEl T‚âàT‚Ä≤ helper
             }
        where helper : (c $ ‚Üì A b) ‚âà c‚Ä≤ $ ‚Üì A‚Ä≤ b‚Ä≤ ‚àà Bot
              helper n
                with c‚âàc‚Ä≤ n | El‚äÜTop iA b‚âàb‚Ä≤ n
              ...  | u , ‚Üòu , ‚Üòu‚Ä≤
                   | w , ‚Üòw , ‚Üòw‚Ä≤ = u $ w , R$ n ‚Üòu ‚Üòw , R$ n ‚Üòu‚Ä≤ ‚Üòw‚Ä≤


      El‚äÜTop : (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i) ‚Üí
               a ‚âà a‚Ä≤ ‚àà El i A‚âàA‚Ä≤ ‚Üí
               ‚Üì A a ‚âà ‚Üì A‚Ä≤ a‚Ä≤ ‚àà Top
      El‚äÜTop (ne C‚âàC‚Ä≤) (ne c‚âàc‚Ä≤) n
        with c‚âàc‚Ä≤ n
      ...  | u , ‚Üòu , ‚Üòu‚Ä≤     = ne u , Rne n ‚Üòu , Rne n ‚Üòu‚Ä≤
      El‚äÜTop N ze n           = ze , Rze n , Rze n
      El‚äÜTop N (su a‚âàb) n
        with El‚äÜTop N a‚âàb n
      ...  | w , ‚Üòw , ‚Üòw‚Ä≤     = su w , Rsu n ‚Üòw , Rsu n ‚Üòw‚Ä≤
      El‚äÜTop N (ne c‚âàc‚Ä≤) n
        with c‚âàc‚Ä≤ n
      ...  | u , ‚Üòu , ‚Üòu‚Ä≤     = ne u , RN n ‚Üòu , RN n ‚Üòu‚Ä≤
      El‚äÜTop (U‚Ä≤ j<i) A‚âàA‚Ä≤ n
        rewrite ùïå-wellfounded-‚â°-ùïå _ j<i
        with rec j<i A‚âàA‚Ä≤ n
      ...  | W , ‚ÜòW , ‚ÜòW‚Ä≤     = W , RU n ‚ÜòW , RU n ‚ÜòW‚Ä≤
      El‚äÜTop (Œ† iA RT) a‚âàa‚Ä≤ n
        with Bot‚äÜEl iA (Bot-l n)
      ...  | z‚âàz‚Ä≤
           with RT z‚âàz‚Ä≤ | a‚âàa‚Ä≤ z‚âàz‚Ä≤
      ...     | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚ü¶T‚Ä≤‚üß = ‚ü¶T‚Ä≤‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚Ä≤‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
              | record { fa = fa ; fa‚Ä≤ = fa‚Ä≤ ; ‚Üòfa = ‚Üòfa ; ‚Üòfa‚Ä≤ = ‚Üòfa‚Ä≤ ; fa‚âàfa‚Ä≤ = fa‚âàfa‚Ä≤ }
              with El‚äÜTop T‚âàT‚Ä≤ fa‚âàfa‚Ä≤ (1 + n)
      ...        | w , ‚Üòw , ‚Üòw‚Ä≤ = Œõ w , RŒõ n ‚Üòfa ‚Üò‚ü¶T‚üß ‚Üòw , RŒõ n ‚Üòfa‚Ä≤ ‚Üò‚ü¶T‚Ä≤‚üß ‚Üòw‚Ä≤


    ùïå‚äÜTopT : (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i) ‚Üí A ‚âà A‚Ä≤ ‚àà TopT
    ùïå‚äÜTopT (ne C‚âàC‚Ä≤) n
      with C‚âàC‚Ä≤ n
    ...  | V , ‚ÜòV , ‚ÜòV‚Ä≤          = ne V , Rne n ‚ÜòV , Rne n ‚ÜòV‚Ä≤
    ùïå‚äÜTopT N n                   = N , RN n , RN n
    ùïå‚äÜTopT (U‚Ä≤ j<i) n            = Se _ , RU n , RU n
    ùïå‚äÜTopT (Œ† iA RT) n
      with Bot‚äÜEl iA (Bot-l n)
    ...  | z‚âàz‚Ä≤
         with RT z‚âàz‚Ä≤
    ...     | record { ‚ü¶T‚üß = ‚ü¶T‚üß ; ‚ü¶T‚Ä≤‚üß = ‚ü¶T‚Ä≤‚üß ; ‚Üò‚ü¶T‚üß = ‚Üò‚ü¶T‚üß ; ‚Üò‚ü¶T‚Ä≤‚üß = ‚Üò‚ü¶T‚Ä≤‚üß ; T‚âàT‚Ä≤ = T‚âàT‚Ä≤ }
            with ùïå‚äÜTopT iA n | ùïå‚äÜTopT T‚âàT‚Ä≤ (1 + n)
    ...        | W , ‚ÜòW , ‚ÜòW‚Ä≤
               | W‚ÇÅ , ‚ÜòW‚ÇÅ , ‚ÜòW‚ÇÅ‚Ä≤ = Œ† W W‚ÇÅ , RŒ† n ‚ÜòW ‚Üò‚ü¶T‚üß ‚ÜòW‚ÇÅ , RŒ† n ‚ÜòW‚Ä≤ ‚Üò‚ü¶T‚Ä≤‚üß ‚ÜòW‚ÇÅ‚Ä≤



ùïå‚äÜTopT : ‚àÄ {i} (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i) ‚Üí A ‚âà A‚Ä≤ ‚àà TopT
ùïå‚äÜTopT A‚âàA‚Ä≤ = <-Measure.wfRec ((Œª i ‚Üí ‚àÄ {A A‚Ä≤} (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i) ‚Üí A ‚âà A‚Ä≤ ‚àà TopT))
                              Real.ùïå‚äÜTopT _ A‚âàA‚Ä≤

Bot‚äÜEl : ‚àÄ {i} (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i) ‚Üí
         c ‚âà c‚Ä≤ ‚àà Bot ‚Üí
         ‚Üë A c ‚âà ‚Üë A‚Ä≤ c‚Ä≤ ‚àà El i A‚âàA‚Ä≤
Bot‚äÜEl {i = i} = Real.Bot‚äÜEl i Œª _ ‚Üí ùïå‚äÜTopT

El‚äÜTop : ‚àÄ {i} (A‚âàA‚Ä≤ : A ‚âà A‚Ä≤ ‚àà ùïå i) ‚Üí
         a ‚âà a‚Ä≤ ‚àà El i A‚âàA‚Ä≤ ‚Üí
         ‚Üì A a ‚âà ‚Üì A‚Ä≤ a‚Ä≤ ‚àà Top
El‚äÜTop {i = i} = Real.El‚äÜTop i (Œª _ ‚Üí ùïå‚äÜTopT)
